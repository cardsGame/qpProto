// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/agent/agent.proto

/*
Package agent is a generated protocol buffer package.

It is generated from these files:
	proto/agent/agent.proto

It has these top-level messages:
	CreateAgentRequest
	GetInfoByUserIDRequest
	GetInfoByIDRequest
	GetAgentListRequest
	GetAgentListResponse
	ChangeAvaliableRequest
	ChangeAvaliableResponse
	Agent
	Link
*/
package agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AgentService service

type AgentService interface {
	// Create an agent and return the created one.
	Create(ctx context.Context, in *CreateAgentRequest, opts ...client.CallOption) (*Agent, error)
	// Get an agent's info in Agent Server
	GetInfoByUserID(ctx context.Context, in *GetInfoByUserIDRequest, opts ...client.CallOption) (*Agent, error)
	// Get an agent's info in Agent Server by agent id
	GetInfoByID(ctx context.Context, in *GetInfoByIDRequest, opts ...client.CallOption) (*Agent, error)
	// Get an agents list in Agent Server
	GetAgentList(ctx context.Context, in *GetAgentListRequest, opts ...client.CallOption) (*GetAgentListResponse, error)
	// ChangeAvaliable
	ChangeAvaliable(ctx context.Context, in *ChangeAvaliableRequest, opts ...client.CallOption) (*ChangeAvaliableResponse, error)
}

type agentService struct {
	c    client.Client
	name string
}

func NewAgentService(name string, c client.Client) AgentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "agent"
	}
	return &agentService{
		c:    c,
		name: name,
	}
}

func (c *agentService) Create(ctx context.Context, in *CreateAgentRequest, opts ...client.CallOption) (*Agent, error) {
	req := c.c.NewRequest(c.name, "AgentService.Create", in)
	out := new(Agent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetInfoByUserID(ctx context.Context, in *GetInfoByUserIDRequest, opts ...client.CallOption) (*Agent, error) {
	req := c.c.NewRequest(c.name, "AgentService.GetInfoByUserID", in)
	out := new(Agent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetInfoByID(ctx context.Context, in *GetInfoByIDRequest, opts ...client.CallOption) (*Agent, error) {
	req := c.c.NewRequest(c.name, "AgentService.GetInfoByID", in)
	out := new(Agent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetAgentList(ctx context.Context, in *GetAgentListRequest, opts ...client.CallOption) (*GetAgentListResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.GetAgentList", in)
	out := new(GetAgentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) ChangeAvaliable(ctx context.Context, in *ChangeAvaliableRequest, opts ...client.CallOption) (*ChangeAvaliableResponse, error) {
	req := c.c.NewRequest(c.name, "AgentService.ChangeAvaliable", in)
	out := new(ChangeAvaliableResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentService service

type AgentServiceHandler interface {
	// Create an agent and return the created one.
	Create(context.Context, *CreateAgentRequest, *Agent) error
	// Get an agent's info in Agent Server
	GetInfoByUserID(context.Context, *GetInfoByUserIDRequest, *Agent) error
	// Get an agent's info in Agent Server by agent id
	GetInfoByID(context.Context, *GetInfoByIDRequest, *Agent) error
	// Get an agents list in Agent Server
	GetAgentList(context.Context, *GetAgentListRequest, *GetAgentListResponse) error
	// ChangeAvaliable
	ChangeAvaliable(context.Context, *ChangeAvaliableRequest, *ChangeAvaliableResponse) error
}

func RegisterAgentServiceHandler(s server.Server, hdlr AgentServiceHandler, opts ...server.HandlerOption) error {
	type agentService interface {
		Create(ctx context.Context, in *CreateAgentRequest, out *Agent) error
		GetInfoByUserID(ctx context.Context, in *GetInfoByUserIDRequest, out *Agent) error
		GetInfoByID(ctx context.Context, in *GetInfoByIDRequest, out *Agent) error
		GetAgentList(ctx context.Context, in *GetAgentListRequest, out *GetAgentListResponse) error
		ChangeAvaliable(ctx context.Context, in *ChangeAvaliableRequest, out *ChangeAvaliableResponse) error
	}
	type AgentService struct {
		agentService
	}
	h := &agentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AgentService{h}, opts...))
}

type agentServiceHandler struct {
	AgentServiceHandler
}

func (h *agentServiceHandler) Create(ctx context.Context, in *CreateAgentRequest, out *Agent) error {
	return h.AgentServiceHandler.Create(ctx, in, out)
}

func (h *agentServiceHandler) GetInfoByUserID(ctx context.Context, in *GetInfoByUserIDRequest, out *Agent) error {
	return h.AgentServiceHandler.GetInfoByUserID(ctx, in, out)
}

func (h *agentServiceHandler) GetInfoByID(ctx context.Context, in *GetInfoByIDRequest, out *Agent) error {
	return h.AgentServiceHandler.GetInfoByID(ctx, in, out)
}

func (h *agentServiceHandler) GetAgentList(ctx context.Context, in *GetAgentListRequest, out *GetAgentListResponse) error {
	return h.AgentServiceHandler.GetAgentList(ctx, in, out)
}

func (h *agentServiceHandler) ChangeAvaliable(ctx context.Context, in *ChangeAvaliableRequest, out *ChangeAvaliableResponse) error {
	return h.AgentServiceHandler.ChangeAvaliable(ctx, in, out)
}
