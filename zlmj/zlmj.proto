syntax = "proto3";

package zlmj;

// 游戏选项
message Option {
    bool cheat = 1; // 作弊模式
    bool xiDingXi = 2; // 喜顶喜
    bool yaoJiuGang = 3; // 幺九杠
    bool yaoJiuJiaFan = 4; // 幺九喜加番
    bool qiangTing = 5; // 抢听
    bool guaDaFeng = 6; // 刮大风
    bool xiaDaYu = 7; // 下大雨
    bool kuaiBao = 8; // 快宝
    bool baoGang = 9; // 宝杠
    bool qiDui = 10; // 七对
    bool beiKaoBei = 11; // 背靠背
    bool xiBuGuaFeng = 12; // 喜不刮风
    bool noChiCha =  13; // 禁供吃叉
    bool dianPaoFirst = 14; // 点炮优先
    bool ming5an10 = 15; // 明5暗10
    bool xiaoFan = 16;// 小番
}

// 游戏数据结构
message GameData {
    State state = 1; // 状态
    Option option = 2; // option选项
    repeated PlayerData players = 3; // 玩家数据
    int32 backCardCount = 4; // 从后面起的牌的数量
    repeated int32 cards = 5; // 牌池
    int32 lastDisCard = 6; // 最后一张出的牌
    int32 curDiscardIndex = 7; // 当前出牌的座位号
    int32 lastDiscardIndex = 8; // 上个出牌的座位号
    int32 cardCount = 9; // 当前牌池剩余的牌
}

// 玩家数据结构
message PlayerData {
    int32 userId = 1;
    int32 index = 2;
    int32 holdsCount = 3;
    repeated int32 holds = 4;
    repeated int32 folds = 5;
    bool canChupai = 6;
    int32 score = 7;
    int32 totalScore = 8;
    bool isMaster = 9;
    int32 curCard = 10;
    repeated int32 disableCards = 11;
    bool isReportTing = 12;
    repeated Action actions = 13;
}

// 状态
enum State {
    initing = 0; // 初始化
    cheating= 1;
    can_discard = 2; // 能出牌
    over = 3; // 游戏结束
}

// 操作码
enum ActionId {
    pass = 0; // 过
    chi = 1; // 吃
    peng = 2; // 碰
    gang = 3; // 名杠
    an_gang = 4; // 暗杠
    guolu_gang = 5; // 过路杠
    ting = 6; // 听牌
}

// 玩家操作
message Action {
    ActionId actionId = 1;
    int32 index = 2; // 座位号
    int32 from = 3; // 操作对象的index 来源
    int32 card = 4; // 触发action的牌
    repeated int32 cards = 5; // 可选的牌
}

message Req {
    oneof req {
        DiscardsReq discardsReq = 1;
        WantHoldsReq wantHoldsReq = 2;
        DoActionReq doActionReq = 3;
    }
}

message Rsp {
    oneof rsp {
        ErrorRsp errorRsp = 1;
        DiscardsRsp discardsRsp = 2;
    }
}

message Event {
    oneof event {
        DiscardsEvent discardsEvent = 1;
        GameStartEvent gameStartEvent = 2;
        DealCardsEvent dealCardsEvent = 3;
        ResumeEvent resumeEvent = 4;
        DrawCardEvent drawCardEvent = 5;
        NewActionEvent newActionEvent = 6;
        RemoveActionEvent removeActionEvent = 7;
        DispatchActionEvent dispatchActionEvent = 8;
    }
}


// region 请求
// 替换想要的牌请求
message WantHoldsReq {
    repeated int32 cards = 1;
}

// 出牌请求
message DiscardsReq {
    int32 card = 1; // action的数组索引
}

// 做action请求
message DoActionReq {
    int32 index = 1;
}
// endregion

// region 响应
// 错误响应
message ErrorRsp {

}
// 出牌响应
message DiscardsRsp {
    
}
// endregion

// region 事件
message GameStartEvent {
    State state = 1; // 游戏状态
    repeated int32 cards = 2; // 牌池
    int32 drawCount = 3; // 抓牌数量
}

// 玩家打牌事件
message DiscardsEvent {
    int32 index = 1;
    int32 card = 2;
}

// 发牌事件
message DealCardsEvent {
    repeated PlayerData players = 1;
}

// 轮到某人打牌事件
message ResumeEvent {
    int32 index = 1; // 座位号
    int32 discardLeft = 2; // 打牌剩余时间
    bool isNewRound = 3; // 是否是新的一轮
}

// 玩家抓牌事件
message DrawCardEvent {
    int32 index = 1;
    int32 card = 2;
    bool back = 3;
}

// 玩家有新的操作
message NewActionEvent {
    repeated Action actions = 1;
}

// 取消玩家的action
message RemoveActionEvent {

}

// 操作分发事件 即别人做了操作
message DispatchActionEvent {
    Action action = 1;
}
// endregion