// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shop/shop.proto

/*
Package shop is a generated protocol buffer package.

It is generated from these files:
	shop/shop.proto

It has these top-level messages:
	Item
	Good
	GetGoodsListRequest
	GetGoodsListResponse
	AddOneGoodRequest
	AddOneGoodResponse
	UpdateOneGoodRequest
	UpdateOneGoodResponse
	BuyOneGoodRequest
	BuyOneGoodResponse
*/
package shop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ShopUserService service

type ShopUserService interface {
	// 获取商城货物列表
	GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...client.CallOption) (*GetGoodsListResponse, error)
	// 购买单个物品(可以调节数量)
	BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, opts ...client.CallOption) (*BuyOneGoodResponse, error)
}

type shopUserService struct {
	c    client.Client
	name string
}

func NewShopUserService(name string, c client.Client) ShopUserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shopuserservice"
	}
	return &shopUserService{
		c:    c,
		name: name,
	}
}

func (c *shopUserService) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...client.CallOption) (*GetGoodsListResponse, error) {
	req := c.c.NewRequest(c.name, "ShopUserService.GetGoodsList", in)
	out := new(GetGoodsListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopUserService) BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, opts ...client.CallOption) (*BuyOneGoodResponse, error) {
	req := c.c.NewRequest(c.name, "ShopUserService.BuyOneGood", in)
	out := new(BuyOneGoodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopUserService service

type ShopUserServiceHandler interface {
	// 获取商城货物列表
	GetGoodsList(context.Context, *GetGoodsListRequest, *GetGoodsListResponse) error
	// 购买单个物品(可以调节数量)
	BuyOneGood(context.Context, *BuyOneGoodRequest, *BuyOneGoodResponse) error
}

func RegisterShopUserServiceHandler(s server.Server, hdlr ShopUserServiceHandler, opts ...server.HandlerOption) error {
	type shopUserService interface {
		GetGoodsList(ctx context.Context, in *GetGoodsListRequest, out *GetGoodsListResponse) error
		BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, out *BuyOneGoodResponse) error
	}
	type ShopUserService struct {
		shopUserService
	}
	h := &shopUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopUserService{h}, opts...))
}

type shopUserServiceHandler struct {
	ShopUserServiceHandler
}

func (h *shopUserServiceHandler) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, out *GetGoodsListResponse) error {
	return h.ShopUserServiceHandler.GetGoodsList(ctx, in, out)
}

func (h *shopUserServiceHandler) BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, out *BuyOneGoodResponse) error {
	return h.ShopUserServiceHandler.BuyOneGood(ctx, in, out)
}

// Client API for ShopAdminService service

type ShopAdminService interface {
	// 获取商城货物列表
	GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...client.CallOption) (*GetGoodsListResponse, error)
	// 新增一个货物到商城
	AddOneGood(ctx context.Context, in *AddOneGoodRequest, opts ...client.CallOption) (*AddOneGoodResponse, error)
	// 更新一个
	UpdateOneGood(ctx context.Context, in *UpdateOneGoodRequest, opts ...client.CallOption) (*UpdateOneGoodResponse, error)
	// 购买单个物品(可以调节数量)
	BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, opts ...client.CallOption) (*BuyOneGoodResponse, error)
}

type shopAdminService struct {
	c    client.Client
	name string
}

func NewShopAdminService(name string, c client.Client) ShopAdminService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "shopadminservice"
	}
	return &shopAdminService{
		c:    c,
		name: name,
	}
}

func (c *shopAdminService) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...client.CallOption) (*GetGoodsListResponse, error) {
	req := c.c.NewRequest(c.name, "ShopAdminService.GetGoodsList", in)
	out := new(GetGoodsListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminService) AddOneGood(ctx context.Context, in *AddOneGoodRequest, opts ...client.CallOption) (*AddOneGoodResponse, error) {
	req := c.c.NewRequest(c.name, "ShopAdminService.AddOneGood", in)
	out := new(AddOneGoodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminService) UpdateOneGood(ctx context.Context, in *UpdateOneGoodRequest, opts ...client.CallOption) (*UpdateOneGoodResponse, error) {
	req := c.c.NewRequest(c.name, "ShopAdminService.UpdateOneGood", in)
	out := new(UpdateOneGoodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminService) BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, opts ...client.CallOption) (*BuyOneGoodResponse, error) {
	req := c.c.NewRequest(c.name, "ShopAdminService.BuyOneGood", in)
	out := new(BuyOneGoodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopAdminService service

type ShopAdminServiceHandler interface {
	// 获取商城货物列表
	GetGoodsList(context.Context, *GetGoodsListRequest, *GetGoodsListResponse) error
	// 新增一个货物到商城
	AddOneGood(context.Context, *AddOneGoodRequest, *AddOneGoodResponse) error
	// 更新一个
	UpdateOneGood(context.Context, *UpdateOneGoodRequest, *UpdateOneGoodResponse) error
	// 购买单个物品(可以调节数量)
	BuyOneGood(context.Context, *BuyOneGoodRequest, *BuyOneGoodResponse) error
}

func RegisterShopAdminServiceHandler(s server.Server, hdlr ShopAdminServiceHandler, opts ...server.HandlerOption) error {
	type shopAdminService interface {
		GetGoodsList(ctx context.Context, in *GetGoodsListRequest, out *GetGoodsListResponse) error
		AddOneGood(ctx context.Context, in *AddOneGoodRequest, out *AddOneGoodResponse) error
		UpdateOneGood(ctx context.Context, in *UpdateOneGoodRequest, out *UpdateOneGoodResponse) error
		BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, out *BuyOneGoodResponse) error
	}
	type ShopAdminService struct {
		shopAdminService
	}
	h := &shopAdminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShopAdminService{h}, opts...))
}

type shopAdminServiceHandler struct {
	ShopAdminServiceHandler
}

func (h *shopAdminServiceHandler) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, out *GetGoodsListResponse) error {
	return h.ShopAdminServiceHandler.GetGoodsList(ctx, in, out)
}

func (h *shopAdminServiceHandler) AddOneGood(ctx context.Context, in *AddOneGoodRequest, out *AddOneGoodResponse) error {
	return h.ShopAdminServiceHandler.AddOneGood(ctx, in, out)
}

func (h *shopAdminServiceHandler) UpdateOneGood(ctx context.Context, in *UpdateOneGoodRequest, out *UpdateOneGoodResponse) error {
	return h.ShopAdminServiceHandler.UpdateOneGood(ctx, in, out)
}

func (h *shopAdminServiceHandler) BuyOneGood(ctx context.Context, in *BuyOneGoodRequest, out *BuyOneGoodResponse) error {
	return h.ShopAdminServiceHandler.BuyOneGood(ctx, in, out)
}
