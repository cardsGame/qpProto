// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/balance/balance.proto

/*
Package balance is a generated protocol buffer package.

It is generated from these files:
	proto/balance/balance.proto

It has these top-level messages:
	NoticeRequest
	NoticeResponse
	GetBalanceRecordListRequest
	GetBalanceRecordListResponse
	GetMoneyRecordListRequest
	GetMoneyRecordListResponse
	GetSumOfRecordRequest
	GetSumOfRecordResponse
	GetSumOfMoneyRequest
	GetSumOfMoneyResponse
	CreateWithdrawRequest
	CreateWithdrawResponse
	BalanceRecord
	MoneyRecord
*/
package balance

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BalanceService service

type BalanceService interface {
	// Notice the agent Server after some user purchasing.
	PurchaseNotice(ctx context.Context, in *NoticeRequest, opts ...client.CallOption) (*NoticeResponse, error)
	// GetBalanceRecordList
	GetBalanceRecordList(ctx context.Context, in *GetBalanceRecordListRequest, opts ...client.CallOption) (*GetBalanceRecordListResponse, error)
	// GetMoneyRecordList
	GetMoneyRecordList(ctx context.Context, in *GetMoneyRecordListRequest, opts ...client.CallOption) (*GetMoneyRecordListResponse, error)
	// GetSumOfRecord
	GetSumOfRecord(ctx context.Context, in *GetSumOfRecordRequest, opts ...client.CallOption) (*GetSumOfRecordResponse, error)
	// GetSumOfMoney
	GetSumOfMoney(ctx context.Context, in *GetSumOfMoneyRequest, opts ...client.CallOption) (*GetSumOfMoneyResponse, error)
	// CreateWithdraw
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...client.CallOption) (*CreateWithdrawResponse, error)
}

type balanceService struct {
	c    client.Client
	name string
}

func NewBalanceService(name string, c client.Client) BalanceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "balance"
	}
	return &balanceService{
		c:    c,
		name: name,
	}
}

func (c *balanceService) PurchaseNotice(ctx context.Context, in *NoticeRequest, opts ...client.CallOption) (*NoticeResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.PurchaseNotice", in)
	out := new(NoticeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) GetBalanceRecordList(ctx context.Context, in *GetBalanceRecordListRequest, opts ...client.CallOption) (*GetBalanceRecordListResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.GetBalanceRecordList", in)
	out := new(GetBalanceRecordListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) GetMoneyRecordList(ctx context.Context, in *GetMoneyRecordListRequest, opts ...client.CallOption) (*GetMoneyRecordListResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.GetMoneyRecordList", in)
	out := new(GetMoneyRecordListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) GetSumOfRecord(ctx context.Context, in *GetSumOfRecordRequest, opts ...client.CallOption) (*GetSumOfRecordResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.GetSumOfRecord", in)
	out := new(GetSumOfRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) GetSumOfMoney(ctx context.Context, in *GetSumOfMoneyRequest, opts ...client.CallOption) (*GetSumOfMoneyResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.GetSumOfMoney", in)
	out := new(GetSumOfMoneyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...client.CallOption) (*CreateWithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "BalanceService.CreateWithdraw", in)
	out := new(CreateWithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BalanceService service

type BalanceServiceHandler interface {
	// Notice the agent Server after some user purchasing.
	PurchaseNotice(context.Context, *NoticeRequest, *NoticeResponse) error
	// GetBalanceRecordList
	GetBalanceRecordList(context.Context, *GetBalanceRecordListRequest, *GetBalanceRecordListResponse) error
	// GetMoneyRecordList
	GetMoneyRecordList(context.Context, *GetMoneyRecordListRequest, *GetMoneyRecordListResponse) error
	// GetSumOfRecord
	GetSumOfRecord(context.Context, *GetSumOfRecordRequest, *GetSumOfRecordResponse) error
	// GetSumOfMoney
	GetSumOfMoney(context.Context, *GetSumOfMoneyRequest, *GetSumOfMoneyResponse) error
	// CreateWithdraw
	CreateWithdraw(context.Context, *CreateWithdrawRequest, *CreateWithdrawResponse) error
}

func RegisterBalanceServiceHandler(s server.Server, hdlr BalanceServiceHandler, opts ...server.HandlerOption) error {
	type balanceService interface {
		PurchaseNotice(ctx context.Context, in *NoticeRequest, out *NoticeResponse) error
		GetBalanceRecordList(ctx context.Context, in *GetBalanceRecordListRequest, out *GetBalanceRecordListResponse) error
		GetMoneyRecordList(ctx context.Context, in *GetMoneyRecordListRequest, out *GetMoneyRecordListResponse) error
		GetSumOfRecord(ctx context.Context, in *GetSumOfRecordRequest, out *GetSumOfRecordResponse) error
		GetSumOfMoney(ctx context.Context, in *GetSumOfMoneyRequest, out *GetSumOfMoneyResponse) error
		CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, out *CreateWithdrawResponse) error
	}
	type BalanceService struct {
		balanceService
	}
	h := &balanceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BalanceService{h}, opts...))
}

type balanceServiceHandler struct {
	BalanceServiceHandler
}

func (h *balanceServiceHandler) PurchaseNotice(ctx context.Context, in *NoticeRequest, out *NoticeResponse) error {
	return h.BalanceServiceHandler.PurchaseNotice(ctx, in, out)
}

func (h *balanceServiceHandler) GetBalanceRecordList(ctx context.Context, in *GetBalanceRecordListRequest, out *GetBalanceRecordListResponse) error {
	return h.BalanceServiceHandler.GetBalanceRecordList(ctx, in, out)
}

func (h *balanceServiceHandler) GetMoneyRecordList(ctx context.Context, in *GetMoneyRecordListRequest, out *GetMoneyRecordListResponse) error {
	return h.BalanceServiceHandler.GetMoneyRecordList(ctx, in, out)
}

func (h *balanceServiceHandler) GetSumOfRecord(ctx context.Context, in *GetSumOfRecordRequest, out *GetSumOfRecordResponse) error {
	return h.BalanceServiceHandler.GetSumOfRecord(ctx, in, out)
}

func (h *balanceServiceHandler) GetSumOfMoney(ctx context.Context, in *GetSumOfMoneyRequest, out *GetSumOfMoneyResponse) error {
	return h.BalanceServiceHandler.GetSumOfMoney(ctx, in, out)
}

func (h *balanceServiceHandler) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, out *CreateWithdrawResponse) error {
	return h.BalanceServiceHandler.CreateWithdraw(ctx, in, out)
}
