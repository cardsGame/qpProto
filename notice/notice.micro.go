// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: notice.proto

/*
Package notice is a generated protocol buffer package.

It is generated from these files:
	notice.proto

It has these top-level messages:
	NoticeData
	CreateNoticeRequest
	DeleteNoticeRequest
	UpdateNoticeRequest
	GetNoticeListRequest
	GetNoticeListResponse
*/
package notice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Notice service

type NoticeService interface {
	CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...client.CallOption) (*NoticeData, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...client.CallOption) (*NoticeData, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...client.CallOption) (*NoticeData, error)
	GetNoticeList(ctx context.Context, in *GetNoticeListRequest, opts ...client.CallOption) (*GetNoticeListResponse, error)
}

type noticeService struct {
	c    client.Client
	name string
}

func NewNoticeService(name string, c client.Client) NoticeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "notice"
	}
	return &noticeService{
		c:    c,
		name: name,
	}
}

func (c *noticeService) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...client.CallOption) (*NoticeData, error) {
	req := c.c.NewRequest(c.name, "Notice.CreateNotice", in)
	out := new(NoticeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeService) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...client.CallOption) (*NoticeData, error) {
	req := c.c.NewRequest(c.name, "Notice.DeleteNotice", in)
	out := new(NoticeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeService) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...client.CallOption) (*NoticeData, error) {
	req := c.c.NewRequest(c.name, "Notice.UpdateNotice", in)
	out := new(NoticeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeService) GetNoticeList(ctx context.Context, in *GetNoticeListRequest, opts ...client.CallOption) (*GetNoticeListResponse, error) {
	req := c.c.NewRequest(c.name, "Notice.GetNoticeList", in)
	out := new(GetNoticeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notice service

type NoticeHandler interface {
	CreateNotice(context.Context, *CreateNoticeRequest, *NoticeData) error
	DeleteNotice(context.Context, *DeleteNoticeRequest, *NoticeData) error
	UpdateNotice(context.Context, *UpdateNoticeRequest, *NoticeData) error
	GetNoticeList(context.Context, *GetNoticeListRequest, *GetNoticeListResponse) error
}

func RegisterNoticeHandler(s server.Server, hdlr NoticeHandler, opts ...server.HandlerOption) error {
	type notice interface {
		CreateNotice(ctx context.Context, in *CreateNoticeRequest, out *NoticeData) error
		DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, out *NoticeData) error
		UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, out *NoticeData) error
		GetNoticeList(ctx context.Context, in *GetNoticeListRequest, out *GetNoticeListResponse) error
	}
	type Notice struct {
		notice
	}
	h := &noticeHandler{hdlr}
	return s.Handle(s.NewHandler(&Notice{h}, opts...))
}

type noticeHandler struct {
	NoticeHandler
}

func (h *noticeHandler) CreateNotice(ctx context.Context, in *CreateNoticeRequest, out *NoticeData) error {
	return h.NoticeHandler.CreateNotice(ctx, in, out)
}

func (h *noticeHandler) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, out *NoticeData) error {
	return h.NoticeHandler.DeleteNotice(ctx, in, out)
}

func (h *noticeHandler) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, out *NoticeData) error {
	return h.NoticeHandler.UpdateNotice(ctx, in, out)
}

func (h *noticeHandler) GetNoticeList(ctx context.Context, in *GetNoticeListRequest, out *GetNoticeListResponse) error {
	return h.NoticeHandler.GetNoticeList(ctx, in, out)
}
