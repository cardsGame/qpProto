// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	proto/test.proto

It has these top-level messages:
	Message
	CreateRequest
	CreateResponse
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Test service

type TestService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Stream(ctx context.Context, opts ...client.CallOption) (Test_StreamService, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "test"
	}
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Test.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) Stream(ctx context.Context, opts ...client.CallOption) (Test_StreamService, error) {
	req := c.c.NewRequest(c.name, "Test.Stream", &Message{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &testServiceStream{stream}, nil
}

type Test_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
	Recv() (*Message, error)
}

type testServiceStream struct {
	stream client.Stream
}

func (x *testServiceStream) Close() error {
	return x.stream.Close()
}

func (x *testServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testServiceStream) Send(m *Message) error {
	return x.stream.Send(m)
}

func (x *testServiceStream) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test service

type TestHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Stream(context.Context, Test_StreamStream) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) error {
	type test interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Test struct {
		test
	}
	h := &testHandler{hdlr}
	return s.Handle(s.NewHandler(&Test{h}, opts...))
}

type testHandler struct {
	TestHandler
}

func (h *testHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.TestHandler.Create(ctx, in, out)
}

func (h *testHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.TestHandler.Stream(ctx, &testStreamStream{stream})
}

type Test_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
	Recv() (*Message, error)
}

type testStreamStream struct {
	stream server.Stream
}

func (x *testStreamStream) Close() error {
	return x.stream.Close()
}

func (x *testStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testStreamStream) Send(m *Message) error {
	return x.stream.Send(m)
}

func (x *testStreamStream) Recv() (*Message, error) {
	m := new(Message)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
