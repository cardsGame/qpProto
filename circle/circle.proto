syntax = "proto3";

service CircleMasterService {
    // 创建
    rpc BuildCircle(BuildCircleRequest) returns (BuildCircleResponse){}

    // 更新
    rpc UpdateCircle(UpdateCircleRequest) returns (UpdateCircleResponse) {}

    // 获取列表
    rpc GetCircleList(GetCircleListRequest) returns (GetCircleListResponse) {}

    // 删除圈子
    rpc DelCircle(DelCircleRequest) returns (DelCircleResponse) {}

    // 获取圈子的消息
    rpc GetCircleMessage(GetCircleMsgRequest) returns (GetCircleMsgResponse) {}

    // 处理圈子消息
    rpc DealMessage(DealMessageRequest) returns (DealMessageResponse) {}

    // 处理申请
    rpc DealApply(DealApplyRequest) returns (DealApplyResponse) {}

    // 获取申请
    rpc GetApplyList(GetApplyListRequest) returns (GetApplyListResponse) {}

}


service CircleUserService {
    // 获取列表
    rpc GetCircleList(GetCircleListRequest) returns (GetCircleListResponse) {}

    // 申请加入圈子
    rpc ApplyJoinCircle(ApplyJoinCircleRequest) returns (ApplyJoinCircleResponse) {}

    // 获取圈子的消息
    rpc GetCircleMessage(GetCircleMsgRequest) returns (GetCircleMsgResponse) {}
}

message BuildCircleRequest {
    string Name = 1;
    string Notice = 2;
    User U = 3;
}

message BuildCircleResponse {
    bool success  = 1;
}


message UpdateCircleRequest {
    int32 CircleId = 1;
    int32 OwnerId = 2;
    map<string, string> update = 3;
}

message UpdateCircleResponse {
    bool success = 1;
}

message GetCircleListRequest {
    int32 OwnerId = 1;
}

message GetCircleListResponse {
    repeated Circle Circles = 1;
}


message DelCircleRequest {
    int32 OwnerId = 1;
    int32 CircleId = 2;
}

message DelCircleResponse {
    bool success = 1;
}

message ApplyJoinCircleRequest {
    int32 CircleId = 1;
    int32 UId = 2;
}

message ApplyJoinCircleResponse {
    bool success  = 1;
    string Message = 2;
}

message GetCircleMsgRequest {
    int32 OwnerId = 1;
    int32 CircleId = 2;
    Tp T = 3;
    int32 Page = 4;
    int32 Limit = 5;

    enum Tp {
        UNIVERSAL = 0;
        JOIN = 1;  // 加入圈子
        QUIT = 2;  // 退出圈子
        KICK = 3;  // 踢出圈子
        APPLY = 4; // 申请加入圈子
    }
}

message GetCircleMsgResponse {
    repeated CircleMsg ApplyMsgs = 1;
}

message DealApplyRequest {
    User U = 1;
    int32 CircleId = 2;
    int32 OwnerId = 3;
    int32 MsgId = 4;
    int32 UserId = 5;
    bool Agree = 6;
}

message DealApplyResponse {
    bool success = 1;
    CircleUser user = 2;
}


message DealMessageRequest {
    int32 MsgId = 1;
    int32 OwnerId = 2;
    int32 CircleId = 3;
}

message DealMessageResponse {
    bool success = 1;
}

message GetApplyListRequest {
    int32 CircleId = 1;
    int32 OwnerId = 2;
    int32 Page = 3;
    int32 Limit = 4;
}

message GetApplyListResponse {
    repeated CircleMsg ApplyMsgs = 1;
}

message CircleUser {
    int32 Id = 1;
    string Name = 2;
    string ImgUrl = 3;
    int32 UserId = 4;
    string JoinAt = 5;
    int32 CircleId = 6;
}

message User {
    int32 Id = 1;
    string ImgUrl = 2;
    string Name = 3;
}

message CircleMsg {
    int32 Id = 1;
    string Content = 2;
    Tp T = 3;
    string UpdateAt = 4;
    string CreateAt = 5;
    int32 UserId = 6;
    User U = 7;

    enum Tp {
        UNIVERSAL = 0;
        JOIN = 1;  // 加入圈子
        QUIT = 2;  // 退出圈子
        KICK = 3;  // 踢出圈子
        APPLY = 4; // 申请加入圈子
    }
}

message Circle {
    int32 OwnerId = 1;
    string CreateAt = 2;
    string UpdateAt = 3;
    string Notice = 4;
    string Name = 5;
    int32 CircleId = 6;
    int32 MemberCount = 7;
}

