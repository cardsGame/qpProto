// Code generated by protoc-gen-go. DO NOT EDIT.
// source: circle/circle.proto

package circle

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CircleMsg_Tp int32

const (
	CircleMsg_UNIVERSAL  CircleMsg_Tp = 0
	CircleMsg_JOIN       CircleMsg_Tp = 1
	CircleMsg_QUIT       CircleMsg_Tp = 2
	CircleMsg_KICK       CircleMsg_Tp = 3
	CircleMsg_APPLY      CircleMsg_Tp = 4
	CircleMsg_APPLY_QUIT CircleMsg_Tp = 5
)

var CircleMsg_Tp_name = map[int32]string{
	0: "UNIVERSAL",
	1: "JOIN",
	2: "QUIT",
	3: "KICK",
	4: "APPLY",
	5: "APPLY_QUIT",
}

var CircleMsg_Tp_value = map[string]int32{
	"UNIVERSAL":  0,
	"JOIN":       1,
	"QUIT":       2,
	"KICK":       3,
	"APPLY":      4,
	"APPLY_QUIT": 5,
}

func (x CircleMsg_Tp) String() string {
	return proto.EnumName(CircleMsg_Tp_name, int32(x))
}

func (CircleMsg_Tp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{30, 0}
}

type BuildCircleRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Notice               string   `protobuf:"bytes,2,opt,name=notice,proto3" json:"notice,omitempty"`
	U                    *User    `protobuf:"bytes,3,opt,name=u,proto3" json:"u,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildCircleRequest) Reset()         { *m = BuildCircleRequest{} }
func (m *BuildCircleRequest) String() string { return proto.CompactTextString(m) }
func (*BuildCircleRequest) ProtoMessage()    {}
func (*BuildCircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{0}
}

func (m *BuildCircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildCircleRequest.Unmarshal(m, b)
}
func (m *BuildCircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildCircleRequest.Marshal(b, m, deterministic)
}
func (m *BuildCircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildCircleRequest.Merge(m, src)
}
func (m *BuildCircleRequest) XXX_Size() int {
	return xxx_messageInfo_BuildCircleRequest.Size(m)
}
func (m *BuildCircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildCircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildCircleRequest proto.InternalMessageInfo

func (m *BuildCircleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildCircleRequest) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *BuildCircleRequest) GetU() *User {
	if m != nil {
		return m.U
	}
	return nil
}

type BuildCircleResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildCircleResponse) Reset()         { *m = BuildCircleResponse{} }
func (m *BuildCircleResponse) String() string { return proto.CompactTextString(m) }
func (*BuildCircleResponse) ProtoMessage()    {}
func (*BuildCircleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{1}
}

func (m *BuildCircleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildCircleResponse.Unmarshal(m, b)
}
func (m *BuildCircleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildCircleResponse.Marshal(b, m, deterministic)
}
func (m *BuildCircleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildCircleResponse.Merge(m, src)
}
func (m *BuildCircleResponse) XXX_Size() int {
	return xxx_messageInfo_BuildCircleResponse.Size(m)
}
func (m *BuildCircleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildCircleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildCircleResponse proto.InternalMessageInfo

func (m *BuildCircleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UpdateCircleRequest struct {
	CircleId             int32             `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32             `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Update               map[string]string `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateCircleRequest) Reset()         { *m = UpdateCircleRequest{} }
func (m *UpdateCircleRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCircleRequest) ProtoMessage()    {}
func (*UpdateCircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{2}
}

func (m *UpdateCircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCircleRequest.Unmarshal(m, b)
}
func (m *UpdateCircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCircleRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCircleRequest.Merge(m, src)
}
func (m *UpdateCircleRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCircleRequest.Size(m)
}
func (m *UpdateCircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCircleRequest proto.InternalMessageInfo

func (m *UpdateCircleRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *UpdateCircleRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *UpdateCircleRequest) GetUpdate() map[string]string {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateCircleResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCircleResponse) Reset()         { *m = UpdateCircleResponse{} }
func (m *UpdateCircleResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCircleResponse) ProtoMessage()    {}
func (*UpdateCircleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{3}
}

func (m *UpdateCircleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCircleResponse.Unmarshal(m, b)
}
func (m *UpdateCircleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCircleResponse.Marshal(b, m, deterministic)
}
func (m *UpdateCircleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCircleResponse.Merge(m, src)
}
func (m *UpdateCircleResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateCircleResponse.Size(m)
}
func (m *UpdateCircleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCircleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCircleResponse proto.InternalMessageInfo

func (m *UpdateCircleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetCircleListRequest struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCircleListRequest) Reset()         { *m = GetCircleListRequest{} }
func (m *GetCircleListRequest) String() string { return proto.CompactTextString(m) }
func (*GetCircleListRequest) ProtoMessage()    {}
func (*GetCircleListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{4}
}

func (m *GetCircleListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleListRequest.Unmarshal(m, b)
}
func (m *GetCircleListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleListRequest.Marshal(b, m, deterministic)
}
func (m *GetCircleListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleListRequest.Merge(m, src)
}
func (m *GetCircleListRequest) XXX_Size() int {
	return xxx_messageInfo_GetCircleListRequest.Size(m)
}
func (m *GetCircleListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleListRequest proto.InternalMessageInfo

func (m *GetCircleListRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetCircleListResponse struct {
	Circles              []*Circle `protobuf:"bytes,1,rep,name=circles,proto3" json:"circles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetCircleListResponse) Reset()         { *m = GetCircleListResponse{} }
func (m *GetCircleListResponse) String() string { return proto.CompactTextString(m) }
func (*GetCircleListResponse) ProtoMessage()    {}
func (*GetCircleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{5}
}

func (m *GetCircleListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleListResponse.Unmarshal(m, b)
}
func (m *GetCircleListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleListResponse.Marshal(b, m, deterministic)
}
func (m *GetCircleListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleListResponse.Merge(m, src)
}
func (m *GetCircleListResponse) XXX_Size() int {
	return xxx_messageInfo_GetCircleListResponse.Size(m)
}
func (m *GetCircleListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleListResponse proto.InternalMessageInfo

func (m *GetCircleListResponse) GetCircles() []*Circle {
	if m != nil {
		return m.Circles
	}
	return nil
}

type DelCircleRequest struct {
	OwnerId              int32    `protobuf:"varint,1,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CircleId             int32    `protobuf:"varint,2,opt,name=circleId,proto3" json:"circleId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelCircleRequest) Reset()         { *m = DelCircleRequest{} }
func (m *DelCircleRequest) String() string { return proto.CompactTextString(m) }
func (*DelCircleRequest) ProtoMessage()    {}
func (*DelCircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{6}
}

func (m *DelCircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelCircleRequest.Unmarshal(m, b)
}
func (m *DelCircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelCircleRequest.Marshal(b, m, deterministic)
}
func (m *DelCircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelCircleRequest.Merge(m, src)
}
func (m *DelCircleRequest) XXX_Size() int {
	return xxx_messageInfo_DelCircleRequest.Size(m)
}
func (m *DelCircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelCircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelCircleRequest proto.InternalMessageInfo

func (m *DelCircleRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *DelCircleRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

type DelCircleResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelCircleResponse) Reset()         { *m = DelCircleResponse{} }
func (m *DelCircleResponse) String() string { return proto.CompactTextString(m) }
func (*DelCircleResponse) ProtoMessage()    {}
func (*DelCircleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{7}
}

func (m *DelCircleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelCircleResponse.Unmarshal(m, b)
}
func (m *DelCircleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelCircleResponse.Marshal(b, m, deterministic)
}
func (m *DelCircleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelCircleResponse.Merge(m, src)
}
func (m *DelCircleResponse) XXX_Size() int {
	return xxx_messageInfo_DelCircleResponse.Size(m)
}
func (m *DelCircleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelCircleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelCircleResponse proto.InternalMessageInfo

func (m *DelCircleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ApplyJoinCircleRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	User                 *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyJoinCircleRequest) Reset()         { *m = ApplyJoinCircleRequest{} }
func (m *ApplyJoinCircleRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyJoinCircleRequest) ProtoMessage()    {}
func (*ApplyJoinCircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{8}
}

func (m *ApplyJoinCircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyJoinCircleRequest.Unmarshal(m, b)
}
func (m *ApplyJoinCircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyJoinCircleRequest.Marshal(b, m, deterministic)
}
func (m *ApplyJoinCircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyJoinCircleRequest.Merge(m, src)
}
func (m *ApplyJoinCircleRequest) XXX_Size() int {
	return xxx_messageInfo_ApplyJoinCircleRequest.Size(m)
}
func (m *ApplyJoinCircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyJoinCircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyJoinCircleRequest proto.InternalMessageInfo

func (m *ApplyJoinCircleRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *ApplyJoinCircleRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ApplyJoinCircleResponse struct {
	Success              bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              *CircleMsg `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ApplyJoinCircleResponse) Reset()         { *m = ApplyJoinCircleResponse{} }
func (m *ApplyJoinCircleResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyJoinCircleResponse) ProtoMessage()    {}
func (*ApplyJoinCircleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{9}
}

func (m *ApplyJoinCircleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyJoinCircleResponse.Unmarshal(m, b)
}
func (m *ApplyJoinCircleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyJoinCircleResponse.Marshal(b, m, deterministic)
}
func (m *ApplyJoinCircleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyJoinCircleResponse.Merge(m, src)
}
func (m *ApplyJoinCircleResponse) XXX_Size() int {
	return xxx_messageInfo_ApplyJoinCircleResponse.Size(m)
}
func (m *ApplyJoinCircleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyJoinCircleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyJoinCircleResponse proto.InternalMessageInfo

func (m *ApplyJoinCircleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ApplyJoinCircleResponse) GetMessage() *CircleMsg {
	if m != nil {
		return m.Message
	}
	return nil
}

type GetCircleLogRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCircleLogRequest) Reset()         { *m = GetCircleLogRequest{} }
func (m *GetCircleLogRequest) String() string { return proto.CompactTextString(m) }
func (*GetCircleLogRequest) ProtoMessage()    {}
func (*GetCircleLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{10}
}

func (m *GetCircleLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleLogRequest.Unmarshal(m, b)
}
func (m *GetCircleLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleLogRequest.Marshal(b, m, deterministic)
}
func (m *GetCircleLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleLogRequest.Merge(m, src)
}
func (m *GetCircleLogRequest) XXX_Size() int {
	return xxx_messageInfo_GetCircleLogRequest.Size(m)
}
func (m *GetCircleLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleLogRequest proto.InternalMessageInfo

func (m *GetCircleLogRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *GetCircleLogRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetCircleLogRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetCircleLogRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetCircleLogResponse struct {
	ApplyMsgs            []*CircleMsg `protobuf:"bytes,1,rep,name=applyMsgs,proto3" json:"applyMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetCircleLogResponse) Reset()         { *m = GetCircleLogResponse{} }
func (m *GetCircleLogResponse) String() string { return proto.CompactTextString(m) }
func (*GetCircleLogResponse) ProtoMessage()    {}
func (*GetCircleLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{11}
}

func (m *GetCircleLogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleLogResponse.Unmarshal(m, b)
}
func (m *GetCircleLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleLogResponse.Marshal(b, m, deterministic)
}
func (m *GetCircleLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleLogResponse.Merge(m, src)
}
func (m *GetCircleLogResponse) XXX_Size() int {
	return xxx_messageInfo_GetCircleLogResponse.Size(m)
}
func (m *GetCircleLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleLogResponse proto.InternalMessageInfo

func (m *GetCircleLogResponse) GetApplyMsgs() []*CircleMsg {
	if m != nil {
		return m.ApplyMsgs
	}
	return nil
}

type DealApplyRequest struct {
	U                    *User    `protobuf:"bytes,1,opt,name=u,proto3" json:"u,omitempty"`
	CircleId             int32    `protobuf:"varint,2,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32    `protobuf:"varint,3,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	MsgId                int32    `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	UserId               int32    `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	Agree                bool     `protobuf:"varint,6,opt,name=agree,proto3" json:"agree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DealApplyRequest) Reset()         { *m = DealApplyRequest{} }
func (m *DealApplyRequest) String() string { return proto.CompactTextString(m) }
func (*DealApplyRequest) ProtoMessage()    {}
func (*DealApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{12}
}

func (m *DealApplyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealApplyRequest.Unmarshal(m, b)
}
func (m *DealApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealApplyRequest.Marshal(b, m, deterministic)
}
func (m *DealApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealApplyRequest.Merge(m, src)
}
func (m *DealApplyRequest) XXX_Size() int {
	return xxx_messageInfo_DealApplyRequest.Size(m)
}
func (m *DealApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DealApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DealApplyRequest proto.InternalMessageInfo

func (m *DealApplyRequest) GetU() *User {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *DealApplyRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *DealApplyRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *DealApplyRequest) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *DealApplyRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DealApplyRequest) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type DealApplyResponse struct {
	Success              bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	User                 *CircleUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DealApplyResponse) Reset()         { *m = DealApplyResponse{} }
func (m *DealApplyResponse) String() string { return proto.CompactTextString(m) }
func (*DealApplyResponse) ProtoMessage()    {}
func (*DealApplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{13}
}

func (m *DealApplyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealApplyResponse.Unmarshal(m, b)
}
func (m *DealApplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealApplyResponse.Marshal(b, m, deterministic)
}
func (m *DealApplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealApplyResponse.Merge(m, src)
}
func (m *DealApplyResponse) XXX_Size() int {
	return xxx_messageInfo_DealApplyResponse.Size(m)
}
func (m *DealApplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DealApplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DealApplyResponse proto.InternalMessageInfo

func (m *DealApplyResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DealApplyResponse) GetUser() *CircleUser {
	if m != nil {
		return m.User
	}
	return nil
}

type DealMessageRequest struct {
	MsgId                int32    `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`
	OwnerId              int32    `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CircleId             int32    `protobuf:"varint,3,opt,name=circleId,proto3" json:"circleId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DealMessageRequest) Reset()         { *m = DealMessageRequest{} }
func (m *DealMessageRequest) String() string { return proto.CompactTextString(m) }
func (*DealMessageRequest) ProtoMessage()    {}
func (*DealMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{14}
}

func (m *DealMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealMessageRequest.Unmarshal(m, b)
}
func (m *DealMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealMessageRequest.Marshal(b, m, deterministic)
}
func (m *DealMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealMessageRequest.Merge(m, src)
}
func (m *DealMessageRequest) XXX_Size() int {
	return xxx_messageInfo_DealMessageRequest.Size(m)
}
func (m *DealMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DealMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DealMessageRequest proto.InternalMessageInfo

func (m *DealMessageRequest) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *DealMessageRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *DealMessageRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

type DealMessageResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DealMessageResponse) Reset()         { *m = DealMessageResponse{} }
func (m *DealMessageResponse) String() string { return proto.CompactTextString(m) }
func (*DealMessageResponse) ProtoMessage()    {}
func (*DealMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{15}
}

func (m *DealMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealMessageResponse.Unmarshal(m, b)
}
func (m *DealMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealMessageResponse.Marshal(b, m, deterministic)
}
func (m *DealMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealMessageResponse.Merge(m, src)
}
func (m *DealMessageResponse) XXX_Size() int {
	return xxx_messageInfo_DealMessageResponse.Size(m)
}
func (m *DealMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DealMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DealMessageResponse proto.InternalMessageInfo

func (m *DealMessageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetApplyListRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32    `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetApplyListRequest) Reset()         { *m = GetApplyListRequest{} }
func (m *GetApplyListRequest) String() string { return proto.CompactTextString(m) }
func (*GetApplyListRequest) ProtoMessage()    {}
func (*GetApplyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{16}
}

func (m *GetApplyListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetApplyListRequest.Unmarshal(m, b)
}
func (m *GetApplyListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetApplyListRequest.Marshal(b, m, deterministic)
}
func (m *GetApplyListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplyListRequest.Merge(m, src)
}
func (m *GetApplyListRequest) XXX_Size() int {
	return xxx_messageInfo_GetApplyListRequest.Size(m)
}
func (m *GetApplyListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplyListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplyListRequest proto.InternalMessageInfo

func (m *GetApplyListRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *GetApplyListRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *GetApplyListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetApplyListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetApplyListResponse struct {
	ApplyMsgs            []*CircleMsg `protobuf:"bytes,1,rep,name=applyMsgs,proto3" json:"applyMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetApplyListResponse) Reset()         { *m = GetApplyListResponse{} }
func (m *GetApplyListResponse) String() string { return proto.CompactTextString(m) }
func (*GetApplyListResponse) ProtoMessage()    {}
func (*GetApplyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{17}
}

func (m *GetApplyListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetApplyListResponse.Unmarshal(m, b)
}
func (m *GetApplyListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetApplyListResponse.Marshal(b, m, deterministic)
}
func (m *GetApplyListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplyListResponse.Merge(m, src)
}
func (m *GetApplyListResponse) XXX_Size() int {
	return xxx_messageInfo_GetApplyListResponse.Size(m)
}
func (m *GetApplyListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplyListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplyListResponse proto.InternalMessageInfo

func (m *GetApplyListResponse) GetApplyMsgs() []*CircleMsg {
	if m != nil {
		return m.ApplyMsgs
	}
	return nil
}

type GetQuiteListRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32    `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQuiteListRequest) Reset()         { *m = GetQuiteListRequest{} }
func (m *GetQuiteListRequest) String() string { return proto.CompactTextString(m) }
func (*GetQuiteListRequest) ProtoMessage()    {}
func (*GetQuiteListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{18}
}

func (m *GetQuiteListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQuiteListRequest.Unmarshal(m, b)
}
func (m *GetQuiteListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQuiteListRequest.Marshal(b, m, deterministic)
}
func (m *GetQuiteListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQuiteListRequest.Merge(m, src)
}
func (m *GetQuiteListRequest) XXX_Size() int {
	return xxx_messageInfo_GetQuiteListRequest.Size(m)
}
func (m *GetQuiteListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQuiteListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQuiteListRequest proto.InternalMessageInfo

func (m *GetQuiteListRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *GetQuiteListRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *GetQuiteListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetQuiteListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetQuiteListResponse struct {
	ApplyMsgs            []*CircleMsg `protobuf:"bytes,1,rep,name=applyMsgs,proto3" json:"applyMsgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetQuiteListResponse) Reset()         { *m = GetQuiteListResponse{} }
func (m *GetQuiteListResponse) String() string { return proto.CompactTextString(m) }
func (*GetQuiteListResponse) ProtoMessage()    {}
func (*GetQuiteListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{19}
}

func (m *GetQuiteListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQuiteListResponse.Unmarshal(m, b)
}
func (m *GetQuiteListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQuiteListResponse.Marshal(b, m, deterministic)
}
func (m *GetQuiteListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQuiteListResponse.Merge(m, src)
}
func (m *GetQuiteListResponse) XXX_Size() int {
	return xxx_messageInfo_GetQuiteListResponse.Size(m)
}
func (m *GetQuiteListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQuiteListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetQuiteListResponse proto.InternalMessageInfo

func (m *GetQuiteListResponse) GetApplyMsgs() []*CircleMsg {
	if m != nil {
		return m.ApplyMsgs
	}
	return nil
}

type DealQuitRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32    `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	MsgId                int32    `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Agree                bool     `protobuf:"varint,5,opt,name=agree,proto3" json:"agree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DealQuitRequest) Reset()         { *m = DealQuitRequest{} }
func (m *DealQuitRequest) String() string { return proto.CompactTextString(m) }
func (*DealQuitRequest) ProtoMessage()    {}
func (*DealQuitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{20}
}

func (m *DealQuitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealQuitRequest.Unmarshal(m, b)
}
func (m *DealQuitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealQuitRequest.Marshal(b, m, deterministic)
}
func (m *DealQuitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealQuitRequest.Merge(m, src)
}
func (m *DealQuitRequest) XXX_Size() int {
	return xxx_messageInfo_DealQuitRequest.Size(m)
}
func (m *DealQuitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DealQuitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DealQuitRequest proto.InternalMessageInfo

func (m *DealQuitRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *DealQuitRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *DealQuitRequest) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *DealQuitRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DealQuitRequest) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type DealQuitResponse struct {
	Success              bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	User                 *CircleUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DealQuitResponse) Reset()         { *m = DealQuitResponse{} }
func (m *DealQuitResponse) String() string { return proto.CompactTextString(m) }
func (*DealQuitResponse) ProtoMessage()    {}
func (*DealQuitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{21}
}

func (m *DealQuitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DealQuitResponse.Unmarshal(m, b)
}
func (m *DealQuitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DealQuitResponse.Marshal(b, m, deterministic)
}
func (m *DealQuitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealQuitResponse.Merge(m, src)
}
func (m *DealQuitResponse) XXX_Size() int {
	return xxx_messageInfo_DealQuitResponse.Size(m)
}
func (m *DealQuitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DealQuitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DealQuitResponse proto.InternalMessageInfo

func (m *DealQuitResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DealQuitResponse) GetUser() *CircleUser {
	if m != nil {
		return m.User
	}
	return nil
}

type ApplyQuitCircleRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	Uid                  int32    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyQuitCircleRequest) Reset()         { *m = ApplyQuitCircleRequest{} }
func (m *ApplyQuitCircleRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyQuitCircleRequest) ProtoMessage()    {}
func (*ApplyQuitCircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{22}
}

func (m *ApplyQuitCircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyQuitCircleRequest.Unmarshal(m, b)
}
func (m *ApplyQuitCircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyQuitCircleRequest.Marshal(b, m, deterministic)
}
func (m *ApplyQuitCircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyQuitCircleRequest.Merge(m, src)
}
func (m *ApplyQuitCircleRequest) XXX_Size() int {
	return xxx_messageInfo_ApplyQuitCircleRequest.Size(m)
}
func (m *ApplyQuitCircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyQuitCircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyQuitCircleRequest proto.InternalMessageInfo

func (m *ApplyQuitCircleRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *ApplyQuitCircleRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type ApplyQuitCircleResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyQuitCircleResponse) Reset()         { *m = ApplyQuitCircleResponse{} }
func (m *ApplyQuitCircleResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyQuitCircleResponse) ProtoMessage()    {}
func (*ApplyQuitCircleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{23}
}

func (m *ApplyQuitCircleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyQuitCircleResponse.Unmarshal(m, b)
}
func (m *ApplyQuitCircleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyQuitCircleResponse.Marshal(b, m, deterministic)
}
func (m *ApplyQuitCircleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyQuitCircleResponse.Merge(m, src)
}
func (m *ApplyQuitCircleResponse) XXX_Size() int {
	return xxx_messageInfo_ApplyQuitCircleResponse.Size(m)
}
func (m *ApplyQuitCircleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyQuitCircleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyQuitCircleResponse proto.InternalMessageInfo

func (m *ApplyQuitCircleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GerCircleDetailRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GerCircleDetailRequest) Reset()         { *m = GerCircleDetailRequest{} }
func (m *GerCircleDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GerCircleDetailRequest) ProtoMessage()    {}
func (*GerCircleDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{24}
}

func (m *GerCircleDetailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerCircleDetailRequest.Unmarshal(m, b)
}
func (m *GerCircleDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerCircleDetailRequest.Marshal(b, m, deterministic)
}
func (m *GerCircleDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerCircleDetailRequest.Merge(m, src)
}
func (m *GerCircleDetailRequest) XXX_Size() int {
	return xxx_messageInfo_GerCircleDetailRequest.Size(m)
}
func (m *GerCircleDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GerCircleDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GerCircleDetailRequest proto.InternalMessageInfo

func (m *GerCircleDetailRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

type GerCircleDetailResponse struct {
	OwnerId              int32    `protobuf:"varint,1,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CreateAt             string   `protobuf:"bytes,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt             string   `protobuf:"bytes,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CircleId             int32    `protobuf:"varint,5,opt,name=circleId,proto3" json:"circleId,omitempty"`
	MemberCount          int32    `protobuf:"varint,6,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	RoomCard             int32    `protobuf:"varint,7,opt,name=roomCard,proto3" json:"roomCard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GerCircleDetailResponse) Reset()         { *m = GerCircleDetailResponse{} }
func (m *GerCircleDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GerCircleDetailResponse) ProtoMessage()    {}
func (*GerCircleDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{25}
}

func (m *GerCircleDetailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerCircleDetailResponse.Unmarshal(m, b)
}
func (m *GerCircleDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerCircleDetailResponse.Marshal(b, m, deterministic)
}
func (m *GerCircleDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerCircleDetailResponse.Merge(m, src)
}
func (m *GerCircleDetailResponse) XXX_Size() int {
	return xxx_messageInfo_GerCircleDetailResponse.Size(m)
}
func (m *GerCircleDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GerCircleDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GerCircleDetailResponse proto.InternalMessageInfo

func (m *GerCircleDetailResponse) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *GerCircleDetailResponse) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *GerCircleDetailResponse) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

func (m *GerCircleDetailResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GerCircleDetailResponse) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *GerCircleDetailResponse) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *GerCircleDetailResponse) GetRoomCard() int32 {
	if m != nil {
		return m.RoomCard
	}
	return 0
}

type GetCircleMembersRequest struct {
	CircleId             int32    `protobuf:"varint,1,opt,name=circleId,proto3" json:"circleId,omitempty"`
	OwnerId              int32    `protobuf:"varint,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCircleMembersRequest) Reset()         { *m = GetCircleMembersRequest{} }
func (m *GetCircleMembersRequest) String() string { return proto.CompactTextString(m) }
func (*GetCircleMembersRequest) ProtoMessage()    {}
func (*GetCircleMembersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{26}
}

func (m *GetCircleMembersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleMembersRequest.Unmarshal(m, b)
}
func (m *GetCircleMembersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleMembersRequest.Marshal(b, m, deterministic)
}
func (m *GetCircleMembersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleMembersRequest.Merge(m, src)
}
func (m *GetCircleMembersRequest) XXX_Size() int {
	return xxx_messageInfo_GetCircleMembersRequest.Size(m)
}
func (m *GetCircleMembersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleMembersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleMembersRequest proto.InternalMessageInfo

func (m *GetCircleMembersRequest) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *GetCircleMembersRequest) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

type GetCircleMembersResponse struct {
	Users                []*CircleUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetCircleMembersResponse) Reset()         { *m = GetCircleMembersResponse{} }
func (m *GetCircleMembersResponse) String() string { return proto.CompactTextString(m) }
func (*GetCircleMembersResponse) ProtoMessage()    {}
func (*GetCircleMembersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{27}
}

func (m *GetCircleMembersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCircleMembersResponse.Unmarshal(m, b)
}
func (m *GetCircleMembersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCircleMembersResponse.Marshal(b, m, deterministic)
}
func (m *GetCircleMembersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCircleMembersResponse.Merge(m, src)
}
func (m *GetCircleMembersResponse) XXX_Size() int {
	return xxx_messageInfo_GetCircleMembersResponse.Size(m)
}
func (m *GetCircleMembersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCircleMembersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCircleMembersResponse proto.InternalMessageInfo

func (m *GetCircleMembersResponse) GetUsers() []*CircleUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type CircleUser struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImgUrl               string   `protobuf:"bytes,3,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	JoinAt               string   `protobuf:"bytes,5,opt,name=joinAt,proto3" json:"joinAt,omitempty"`
	CircleId             int32    `protobuf:"varint,6,opt,name=circleId,proto3" json:"circleId,omitempty"`
	Remark               string   `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	TotalGameCount       int32    `protobuf:"varint,8,opt,name=totalGameCount,proto3" json:"totalGameCount,omitempty"`
	PreGameCount         int32    `protobuf:"varint,9,opt,name=preGameCount,proto3" json:"preGameCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CircleUser) Reset()         { *m = CircleUser{} }
func (m *CircleUser) String() string { return proto.CompactTextString(m) }
func (*CircleUser) ProtoMessage()    {}
func (*CircleUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{28}
}

func (m *CircleUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircleUser.Unmarshal(m, b)
}
func (m *CircleUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircleUser.Marshal(b, m, deterministic)
}
func (m *CircleUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircleUser.Merge(m, src)
}
func (m *CircleUser) XXX_Size() int {
	return xxx_messageInfo_CircleUser.Size(m)
}
func (m *CircleUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CircleUser.DiscardUnknown(m)
}

var xxx_messageInfo_CircleUser proto.InternalMessageInfo

func (m *CircleUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CircleUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CircleUser) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *CircleUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CircleUser) GetJoinAt() string {
	if m != nil {
		return m.JoinAt
	}
	return ""
}

func (m *CircleUser) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *CircleUser) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *CircleUser) GetTotalGameCount() int32 {
	if m != nil {
		return m.TotalGameCount
	}
	return 0
}

func (m *CircleUser) GetPreGameCount() int32 {
	if m != nil {
		return m.PreGameCount
	}
	return 0
}

type User struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImgUrl               string   `protobuf:"bytes,2,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{29}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CircleMsg struct {
	Id                   int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content              string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	T                    CircleMsg_Tp `protobuf:"varint,3,opt,name=t,proto3,enum=CircleMsg_Tp" json:"t,omitempty"`
	UpdateAt             string       `protobuf:"bytes,4,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	CreateAt             string       `protobuf:"bytes,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UserId               int32        `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
	U                    *User        `protobuf:"bytes,7,opt,name=u,proto3" json:"u,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CircleMsg) Reset()         { *m = CircleMsg{} }
func (m *CircleMsg) String() string { return proto.CompactTextString(m) }
func (*CircleMsg) ProtoMessage()    {}
func (*CircleMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{30}
}

func (m *CircleMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircleMsg.Unmarshal(m, b)
}
func (m *CircleMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircleMsg.Marshal(b, m, deterministic)
}
func (m *CircleMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircleMsg.Merge(m, src)
}
func (m *CircleMsg) XXX_Size() int {
	return xxx_messageInfo_CircleMsg.Size(m)
}
func (m *CircleMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CircleMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CircleMsg proto.InternalMessageInfo

func (m *CircleMsg) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CircleMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CircleMsg) GetT() CircleMsg_Tp {
	if m != nil {
		return m.T
	}
	return CircleMsg_UNIVERSAL
}

func (m *CircleMsg) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

func (m *CircleMsg) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *CircleMsg) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CircleMsg) GetU() *User {
	if m != nil {
		return m.U
	}
	return nil
}

type Circle struct {
	OwnerId  int32  `protobuf:"varint,1,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	CreateAt string `protobuf:"bytes,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt string `protobuf:"bytes,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	//    string Notice = 4;
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CircleId             int32    `protobuf:"varint,5,opt,name=circleId,proto3" json:"circleId,omitempty"`
	MemberCount          int32    `protobuf:"varint,6,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Circle) Reset()         { *m = Circle{} }
func (m *Circle) String() string { return proto.CompactTextString(m) }
func (*Circle) ProtoMessage()    {}
func (*Circle) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c720f4490ca94, []int{31}
}

func (m *Circle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Circle.Unmarshal(m, b)
}
func (m *Circle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Circle.Marshal(b, m, deterministic)
}
func (m *Circle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Circle.Merge(m, src)
}
func (m *Circle) XXX_Size() int {
	return xxx_messageInfo_Circle.Size(m)
}
func (m *Circle) XXX_DiscardUnknown() {
	xxx_messageInfo_Circle.DiscardUnknown(m)
}

var xxx_messageInfo_Circle proto.InternalMessageInfo

func (m *Circle) GetOwnerId() int32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *Circle) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *Circle) GetUpdateAt() string {
	if m != nil {
		return m.UpdateAt
	}
	return ""
}

func (m *Circle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Circle) GetCircleId() int32 {
	if m != nil {
		return m.CircleId
	}
	return 0
}

func (m *Circle) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("CircleMsg_Tp", CircleMsg_Tp_name, CircleMsg_Tp_value)
	proto.RegisterType((*BuildCircleRequest)(nil), "BuildCircleRequest")
	proto.RegisterType((*BuildCircleResponse)(nil), "BuildCircleResponse")
	proto.RegisterType((*UpdateCircleRequest)(nil), "UpdateCircleRequest")
	proto.RegisterMapType((map[string]string)(nil), "UpdateCircleRequest.UpdateEntry")
	proto.RegisterType((*UpdateCircleResponse)(nil), "UpdateCircleResponse")
	proto.RegisterType((*GetCircleListRequest)(nil), "GetCircleListRequest")
	proto.RegisterType((*GetCircleListResponse)(nil), "GetCircleListResponse")
	proto.RegisterType((*DelCircleRequest)(nil), "DelCircleRequest")
	proto.RegisterType((*DelCircleResponse)(nil), "DelCircleResponse")
	proto.RegisterType((*ApplyJoinCircleRequest)(nil), "ApplyJoinCircleRequest")
	proto.RegisterType((*ApplyJoinCircleResponse)(nil), "ApplyJoinCircleResponse")
	proto.RegisterType((*GetCircleLogRequest)(nil), "GetCircleLogRequest")
	proto.RegisterType((*GetCircleLogResponse)(nil), "GetCircleLogResponse")
	proto.RegisterType((*DealApplyRequest)(nil), "DealApplyRequest")
	proto.RegisterType((*DealApplyResponse)(nil), "DealApplyResponse")
	proto.RegisterType((*DealMessageRequest)(nil), "DealMessageRequest")
	proto.RegisterType((*DealMessageResponse)(nil), "DealMessageResponse")
	proto.RegisterType((*GetApplyListRequest)(nil), "GetApplyListRequest")
	proto.RegisterType((*GetApplyListResponse)(nil), "GetApplyListResponse")
	proto.RegisterType((*GetQuiteListRequest)(nil), "GetQuiteListRequest")
	proto.RegisterType((*GetQuiteListResponse)(nil), "GetQuiteListResponse")
	proto.RegisterType((*DealQuitRequest)(nil), "DealQuitRequest")
	proto.RegisterType((*DealQuitResponse)(nil), "DealQuitResponse")
	proto.RegisterType((*ApplyQuitCircleRequest)(nil), "ApplyQuitCircleRequest")
	proto.RegisterType((*ApplyQuitCircleResponse)(nil), "ApplyQuitCircleResponse")
	proto.RegisterType((*GerCircleDetailRequest)(nil), "GerCircleDetailRequest")
	proto.RegisterType((*GerCircleDetailResponse)(nil), "GerCircleDetailResponse")
	proto.RegisterType((*GetCircleMembersRequest)(nil), "GetCircleMembersRequest")
	proto.RegisterType((*GetCircleMembersResponse)(nil), "GetCircleMembersResponse")
	proto.RegisterType((*CircleUser)(nil), "CircleUser")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*CircleMsg)(nil), "CircleMsg")
	proto.RegisterType((*Circle)(nil), "Circle")
}

func init() { proto.RegisterFile("circle/circle.proto", fileDescriptor_bb5c720f4490ca94) }

var fileDescriptor_bb5c720f4490ca94 = []byte{
	// 1243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x45, 0x51, 0xb2, 0x46, 0xb1, 0x23, 0xaf, 0x64, 0x99, 0x61, 0x0f, 0x75, 0x17, 0x45,
	0xe1, 0x4b, 0xd7, 0xad, 0x93, 0x43, 0x6a, 0x20, 0x40, 0x14, 0x27, 0x71, 0x95, 0xf8, 0x27, 0x61,
	0xac, 0x02, 0x39, 0xb5, 0x8c, 0xb4, 0x10, 0xd8, 0x48, 0xa2, 0xca, 0x9f, 0x14, 0x7e, 0x80, 0x9e,
	0xfa, 0x14, 0xbd, 0xf7, 0x5a, 0xf4, 0xda, 0xd7, 0xe8, 0x9b, 0xf4, 0x58, 0xec, 0x1f, 0xb9, 0xa4,
	0xa8, 0xc8, 0xa9, 0x8b, 0x02, 0x3d, 0x69, 0x67, 0xb9, 0x3b, 0x3b, 0xf3, 0xed, 0xb7, 0xb3, 0xdf,
	0x0a, 0x3a, 0x23, 0x3f, 0x1c, 0x4d, 0xe9, 0x81, 0xf8, 0x21, 0x8b, 0x30, 0x88, 0x03, 0x3c, 0x04,
	0xf4, 0x28, 0xf1, 0xa7, 0xe3, 0x63, 0xde, 0xe9, 0xd2, 0x1f, 0x12, 0x1a, 0xc5, 0x08, 0x41, 0x6d,
	0xee, 0xcd, 0xa8, 0x6d, 0xec, 0x19, 0xfb, 0x4d, 0x97, 0xb7, 0x51, 0x0f, 0xea, 0xf3, 0x20, 0xf6,
	0x47, 0xd4, 0xae, 0xf2, 0x5e, 0x69, 0xa1, 0x0e, 0x18, 0x89, 0x6d, 0xee, 0x19, 0xfb, 0xad, 0x43,
	0x8b, 0x0c, 0x23, 0x1a, 0xba, 0x46, 0x82, 0x0f, 0xa0, 0x93, 0x73, 0x1b, 0x2d, 0x82, 0x79, 0x44,
	0x91, 0x0d, 0x8d, 0x28, 0x19, 0x8d, 0x68, 0x14, 0x71, 0xd7, 0x1b, 0xae, 0x32, 0xf1, 0x1f, 0x06,
	0x74, 0x86, 0x8b, 0xb1, 0x17, 0xd3, 0x7c, 0x24, 0x0e, 0x6c, 0x88, 0x78, 0x07, 0x63, 0x3e, 0xc5,
	0x72, 0x53, 0x9b, 0x79, 0x0b, 0x7e, 0x9c, 0xd3, 0x70, 0x30, 0xe6, 0x21, 0x59, 0xae, 0x32, 0xd1,
	0x7d, 0xa8, 0x27, 0xdc, 0x99, 0x6d, 0xee, 0x99, 0xfb, 0xad, 0xc3, 0x3d, 0x52, 0xe2, 0x5b, 0xf6,
	0x3d, 0x99, 0xc7, 0xe1, 0x95, 0x2b, 0xc7, 0x3b, 0x5f, 0x41, 0x4b, 0xeb, 0x46, 0x6d, 0x30, 0xdf,
	0xd2, 0x2b, 0x89, 0x03, 0x6b, 0xa2, 0x2e, 0x58, 0xef, 0xbc, 0x69, 0xa2, 0x50, 0x10, 0xc6, 0x51,
	0xf5, 0xbe, 0x81, 0xbf, 0x80, 0x6e, 0x7e, 0x95, 0xb5, 0x49, 0xef, 0x43, 0xf7, 0x84, 0xc6, 0x62,
	0xf8, 0xa9, 0x1f, 0xc5, 0x2a, 0xe9, 0x36, 0x98, 0x89, 0xaf, 0xf2, 0x65, 0x4d, 0x7c, 0x04, 0x3b,
	0x85, 0x91, 0xd2, 0xf9, 0x27, 0xd0, 0x10, 0x78, 0x30, 0xe7, 0x2c, 0xd5, 0x06, 0x91, 0xcb, 0xab,
	0x7e, 0xfc, 0x35, 0xb4, 0x1f, 0xd3, 0x69, 0x1e, 0x56, 0x0d, 0x3a, 0x23, 0x0f, 0x9d, 0x0e, 0x78,
	0x35, 0x0f, 0x38, 0xfe, 0x1c, 0xb6, 0x35, 0x4f, 0x6b, 0xd3, 0xbb, 0x80, 0x5e, 0x7f, 0xb1, 0x98,
	0x5e, 0x3d, 0x0b, 0xfc, 0xf9, 0xf5, 0x77, 0xf5, 0x0e, 0xd4, 0x92, 0x88, 0x86, 0x7c, 0xf1, 0x94,
	0x52, 0xbc, 0x0b, 0xbf, 0x86, 0xdd, 0x25, 0x87, 0xeb, 0xa2, 0x40, 0x9f, 0x42, 0x63, 0x46, 0xa3,
	0xc8, 0x9b, 0x50, 0xe9, 0x12, 0x24, 0x42, 0x67, 0xd1, 0xc4, 0x55, 0x9f, 0x70, 0x04, 0x9d, 0x0c,
	0xe0, 0x60, 0x72, 0x9d, 0x40, 0x11, 0xd4, 0x16, 0xca, 0xab, 0xe5, 0xf2, 0x36, 0x63, 0xc7, 0xd4,
	0x9f, 0xf9, 0x31, 0x3f, 0x10, 0x96, 0x2b, 0x0c, 0x76, 0x74, 0x58, 0xfc, 0x83, 0xb1, 0x5d, 0xe3,
	0xdd, 0xd2, 0xc2, 0x0f, 0xf5, 0xfd, 0x67, 0x8b, 0xca, 0x64, 0xf6, 0xa1, 0xe9, 0xb1, 0x3c, 0xcf,
	0xa2, 0x89, 0xda, 0x56, 0x3d, 0xe8, 0xec, 0x23, 0xfe, 0xc5, 0x60, 0x9b, 0xeb, 0x4d, 0x39, 0x2c,
	0x2a, 0x68, 0x7e, 0x22, 0x8d, 0xfc, 0x89, 0x7c, 0xdf, 0xbe, 0xea, 0x6c, 0x30, 0xf3, 0x6c, 0xe8,
	0x82, 0x35, 0x8b, 0x26, 0x69, 0xe0, 0xc2, 0xd0, 0xf2, 0xb1, 0xf4, 0x7c, 0xd8, 0x68, 0x6f, 0x12,
	0x52, 0x6a, 0xd7, 0xf9, 0x16, 0x08, 0x03, 0x9f, 0x33, 0xd6, 0xa4, 0x21, 0xae, 0xdd, 0xaf, 0x8f,
	0x73, 0xfb, 0xdf, 0x92, 0x79, 0x6b, 0x2c, 0xf8, 0x0e, 0x10, 0xf3, 0x77, 0x26, 0x76, 0x4e, 0x25,
	0x9d, 0x46, 0x6a, 0xe8, 0x91, 0xae, 0x2e, 0x11, 0x3a, 0x1e, 0x66, 0x81, 0xe7, 0x07, 0xd0, 0xc9,
	0xad, 0xb0, 0x96, 0xe9, 0x09, 0x67, 0x0f, 0xcf, 0x50, 0x3f, 0xc7, 0xff, 0xac, 0x78, 0x29, 0x5e,
	0x99, 0x65, 0xbc, 0xaa, 0x69, 0xbc, 0x92, 0xfc, 0xd1, 0x96, 0xfd, 0x60, 0xfe, 0x88, 0xc0, 0x5f,
	0x26, 0x7e, 0x4c, 0xff, 0xfb, 0xc0, 0xb5, 0x65, 0x3f, 0x38, 0xf0, 0x9f, 0x0d, 0xb8, 0xcd, 0xf6,
	0x88, 0xf9, 0xb8, 0x59, 0xd4, 0x29, 0x71, 0xcc, 0x72, 0x8a, 0xd7, 0xca, 0x29, 0x6e, 0xe9, 0x14,
	0x3f, 0x13, 0xa7, 0x50, 0x04, 0x73, 0x73, 0x86, 0x3f, 0x95, 0x85, 0x93, 0xf9, 0xbb, 0x7e, 0xe1,
	0x94, 0xb7, 0x46, 0x35, 0xbb, 0x35, 0xee, 0xca, 0x7a, 0xa9, 0xfb, 0x59, 0xcb, 0xe5, 0x7b, 0xd0,
	0x3b, 0xa1, 0xa1, 0x18, 0xfe, 0x98, 0xc6, 0x9e, 0x3f, 0xbd, 0xc6, 0xe2, 0xf8, 0x4f, 0x03, 0x76,
	0x97, 0xa6, 0x65, 0x6b, 0xbd, 0xe7, 0xb2, 0x09, 0xa9, 0x17, 0xd3, 0x7e, 0x2c, 0xef, 0xd3, 0xd4,
	0x66, 0xdf, 0xc4, 0x9d, 0xdc, 0x17, 0xd5, 0xb4, 0xe9, 0xa6, 0x76, 0xaa, 0x4f, 0x6a, 0x9a, 0x3e,
	0xd1, 0xa3, 0xb3, 0x0a, 0xd0, 0xec, 0x41, 0x6b, 0x46, 0x67, 0x6f, 0x68, 0x78, 0x1c, 0x24, 0xf3,
	0x98, 0x97, 0x27, 0xcb, 0xd5, 0xbb, 0xd8, 0xec, 0x30, 0x08, 0x66, 0xc7, 0x5e, 0x38, 0xb6, 0x1b,
	0x62, 0xb6, 0xb2, 0xf1, 0x05, 0x4b, 0x4d, 0x02, 0x78, 0xc6, 0xe7, 0x44, 0x37, 0xa2, 0x1c, 0x7e,
	0x00, 0xf6, 0xb2, 0xc3, 0xf4, 0x42, 0xb7, 0x18, 0x07, 0x14, 0xfd, 0x73, 0xec, 0x10, 0x5f, 0xf0,
	0x5f, 0x06, 0x40, 0xd6, 0x8b, 0xb6, 0xa0, 0x9a, 0x8a, 0x85, 0xaa, 0x3f, 0x4e, 0xc1, 0xa9, 0xe6,
	0xc5, 0x9b, 0x3f, 0x9b, 0x0c, 0xc3, 0xa9, 0x84, 0x52, 0x5a, 0x2b, 0x69, 0xde, 0x83, 0xfa, 0xf7,
	0x81, 0x3f, 0xef, 0xc7, 0x1c, 0xca, 0xa6, 0x2b, 0xad, 0x5c, 0xbe, 0xf5, 0x42, 0xbe, 0x3d, 0xa8,
	0x87, 0x74, 0xe6, 0x85, 0x6f, 0x39, 0x80, 0x4d, 0x57, 0x5a, 0xe8, 0x33, 0xd8, 0x8a, 0x83, 0xd8,
	0x9b, 0x9e, 0x78, 0x33, 0x2a, 0xf0, 0xdf, 0xe0, 0x33, 0x0b, 0xbd, 0x08, 0xc3, 0xad, 0x45, 0x48,
	0xb3, 0x51, 0x4d, 0x3e, 0x2a, 0xd7, 0x87, 0x1f, 0x41, 0xad, 0x34, 0xe7, 0x2c, 0xbf, 0x6a, 0x2e,
	0x3f, 0x85, 0x85, 0x99, 0x61, 0x81, 0x7f, 0xaa, 0x42, 0x33, 0xad, 0x29, 0x4b, 0x9e, 0x6c, 0x68,
	0x8c, 0x82, 0x79, 0x4c, 0xe7, 0x8a, 0x91, 0xca, 0x44, 0x1f, 0x81, 0x21, 0x98, 0xb8, 0x75, 0xb8,
	0x99, 0x15, 0x25, 0x72, 0xb9, 0x70, 0x8d, 0x3c, 0x5b, 0x6b, 0x05, 0xb6, 0xea, 0x2c, 0xb7, 0x0a,
	0x2c, 0xcf, 0x36, 0xa0, 0x9e, 0xdb, 0x00, 0x7e, 0x87, 0x37, 0x0a, 0xaa, 0xfa, 0x14, 0xaa, 0x97,
	0x0b, 0xb4, 0x09, 0xcd, 0xe1, 0xf9, 0xe0, 0x9b, 0x27, 0xee, 0xab, 0xfe, 0x69, 0xbb, 0x82, 0x36,
	0xa0, 0xf6, 0xec, 0x62, 0x70, 0xde, 0x36, 0x58, 0xeb, 0xe5, 0x70, 0x70, 0xd9, 0xae, 0xb2, 0xd6,
	0xf3, 0xc1, 0xf1, 0xf3, 0xb6, 0x89, 0x9a, 0x60, 0xf5, 0x5f, 0xbc, 0x38, 0x7d, 0xdd, 0xae, 0xa1,
	0x2d, 0x00, 0xde, 0xfc, 0x96, 0x0f, 0xb2, 0xf0, 0xaf, 0x06, 0xd4, 0x45, 0x1a, 0xff, 0x87, 0x13,
	0x7a, 0xf8, 0x9b, 0x05, 0x1d, 0x89, 0xba, 0x17, 0xc5, 0x34, 0x7c, 0x45, 0xc3, 0x77, 0xec, 0xfd,
	0x71, 0x04, 0x2d, 0xed, 0xa9, 0x81, 0x3a, 0x64, 0xf9, 0x3d, 0xe3, 0x74, 0x49, 0xc9, 0x6b, 0x04,
	0x57, 0xd0, 0x03, 0xb8, 0xa5, 0x4b, 0x76, 0xd4, 0x2d, 0x7b, 0x27, 0x38, 0x3b, 0xa4, 0x4c, 0xd7,
	0xe3, 0x0a, 0x7a, 0x08, 0x9b, 0x39, 0x55, 0x8e, 0x76, 0x48, 0x99, 0x9e, 0x77, 0x7a, 0xa4, 0x54,
	0xbc, 0xe3, 0x0a, 0x1a, 0x40, 0xbb, 0x58, 0x09, 0x90, 0x4d, 0x56, 0x54, 0x1b, 0xe7, 0x0e, 0x59,
	0x55, 0x36, 0x70, 0x05, 0xdd, 0x83, 0x66, 0x2a, 0xce, 0xd1, 0x36, 0x29, 0x4a, 0x7e, 0x07, 0x91,
	0x25, 0xed, 0x2e, 0x10, 0xd0, 0x25, 0x28, 0xea, 0x92, 0x12, 0x19, 0xec, 0xec, 0x90, 0x32, 0x9d,
	0x8a, 0x2b, 0x0c, 0x7c, 0x4d, 0x29, 0xa1, 0x0e, 0x59, 0x56, 0x66, 0x4e, 0x97, 0x94, 0x88, 0x29,
	0x15, 0xb0, 0xd4, 0x85, 0x3c, 0xe0, 0xbc, 0x8c, 0xe5, 0x01, 0x17, 0x64, 0x63, 0x1a, 0x70, 0xaa,
	0x79, 0x44, 0xc0, 0x45, 0xe5, 0x25, 0x02, 0x5e, 0x12, 0x46, 0xe9, 0xf4, 0x54, 0x79, 0x88, 0xe9,
	0x45, 0xfd, 0x23, 0xa6, 0x2f, 0xc9, 0x13, 0x5c, 0x41, 0x5f, 0xc2, 0x86, 0xba, 0xe8, 0x51, 0x9b,
	0x14, 0x04, 0x88, 0xb3, 0x4d, 0x8a, 0x2a, 0x00, 0x57, 0x0e, 0x7f, 0x37, 0x61, 0x3b, 0xab, 0xd6,
	0x8a, 0xb5, 0x37, 0xa7, 0xce, 0x53, 0xb8, 0x5d, 0x78, 0x0c, 0xa1, 0x5d, 0x52, 0xfe, 0xde, 0x72,
	0x6c, 0xb2, 0xe2, 0xdd, 0xf4, 0xef, 0x52, 0xf0, 0x86, 0x64, 0x52, 0x19, 0x65, 0x72, 0x45, 0x65,
	0xb4, 0x24, 0x84, 0x54, 0x46, 0xcb, 0xca, 0x46, 0xf8, 0x29, 0x48, 0x11, 0xb4, 0x4b, 0xca, 0x35,
	0x8d, 0x63, 0x93, 0x15, 0xaa, 0x05, 0x57, 0xde, 0xd4, 0xf9, 0x5f, 0x24, 0x77, 0xff, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0xeb, 0x1c, 0xe7, 0x39, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CircleMasterServiceClient is the client API for CircleMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CircleMasterServiceClient interface {
	// 创建
	BuildCircle(ctx context.Context, in *BuildCircleRequest, opts ...grpc.CallOption) (*BuildCircleResponse, error)
	// 更新
	UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...grpc.CallOption) (*UpdateCircleResponse, error)
	// 获取圈子列表
	GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...grpc.CallOption) (*GetCircleListResponse, error)
	// 获取成员列表
	GetCircleMembers(ctx context.Context, in *GetCircleMembersRequest, opts ...grpc.CallOption) (*GetCircleMembersResponse, error)
	// 删除圈子
	DelCircle(ctx context.Context, in *DelCircleRequest, opts ...grpc.CallOption) (*DelCircleResponse, error)
	// 获取圈子的日志
	GetCircleLog(ctx context.Context, in *GetCircleLogRequest, opts ...grpc.CallOption) (*GetCircleLogResponse, error)
	// 处理圈子消息
	DealMessage(ctx context.Context, in *DealMessageRequest, opts ...grpc.CallOption) (*DealMessageResponse, error)
	// 处理申请
	DealApply(ctx context.Context, in *DealApplyRequest, opts ...grpc.CallOption) (*DealApplyResponse, error)
	// 获取加入圈子申请
	GetApplyList(ctx context.Context, in *GetApplyListRequest, opts ...grpc.CallOption) (*GetApplyListResponse, error)
	// 获取退出圈子申请
	GetQuiteList(ctx context.Context, in *GetQuiteListRequest, opts ...grpc.CallOption) (*GetQuiteListResponse, error)
	// 处理用户退出申请
	DealQuit(ctx context.Context, in *DealQuitRequest, opts ...grpc.CallOption) (*DealQuitResponse, error)
}

type circleMasterServiceClient struct {
	cc *grpc.ClientConn
}

func NewCircleMasterServiceClient(cc *grpc.ClientConn) CircleMasterServiceClient {
	return &circleMasterServiceClient{cc}
}

func (c *circleMasterServiceClient) BuildCircle(ctx context.Context, in *BuildCircleRequest, opts ...grpc.CallOption) (*BuildCircleResponse, error) {
	out := new(BuildCircleResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/BuildCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...grpc.CallOption) (*UpdateCircleResponse, error) {
	out := new(UpdateCircleResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/UpdateCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...grpc.CallOption) (*GetCircleListResponse, error) {
	out := new(GetCircleListResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/GetCircleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) GetCircleMembers(ctx context.Context, in *GetCircleMembersRequest, opts ...grpc.CallOption) (*GetCircleMembersResponse, error) {
	out := new(GetCircleMembersResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/GetCircleMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) DelCircle(ctx context.Context, in *DelCircleRequest, opts ...grpc.CallOption) (*DelCircleResponse, error) {
	out := new(DelCircleResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/DelCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) GetCircleLog(ctx context.Context, in *GetCircleLogRequest, opts ...grpc.CallOption) (*GetCircleLogResponse, error) {
	out := new(GetCircleLogResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/GetCircleLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) DealMessage(ctx context.Context, in *DealMessageRequest, opts ...grpc.CallOption) (*DealMessageResponse, error) {
	out := new(DealMessageResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/DealMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) DealApply(ctx context.Context, in *DealApplyRequest, opts ...grpc.CallOption) (*DealApplyResponse, error) {
	out := new(DealApplyResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/DealApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) GetApplyList(ctx context.Context, in *GetApplyListRequest, opts ...grpc.CallOption) (*GetApplyListResponse, error) {
	out := new(GetApplyListResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/GetApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) GetQuiteList(ctx context.Context, in *GetQuiteListRequest, opts ...grpc.CallOption) (*GetQuiteListResponse, error) {
	out := new(GetQuiteListResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/GetQuiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterServiceClient) DealQuit(ctx context.Context, in *DealQuitRequest, opts ...grpc.CallOption) (*DealQuitResponse, error) {
	out := new(DealQuitResponse)
	err := c.cc.Invoke(ctx, "/CircleMasterService/DealQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircleMasterServiceServer is the server API for CircleMasterService service.
type CircleMasterServiceServer interface {
	// 创建
	BuildCircle(context.Context, *BuildCircleRequest) (*BuildCircleResponse, error)
	// 更新
	UpdateCircle(context.Context, *UpdateCircleRequest) (*UpdateCircleResponse, error)
	// 获取圈子列表
	GetCircleList(context.Context, *GetCircleListRequest) (*GetCircleListResponse, error)
	// 获取成员列表
	GetCircleMembers(context.Context, *GetCircleMembersRequest) (*GetCircleMembersResponse, error)
	// 删除圈子
	DelCircle(context.Context, *DelCircleRequest) (*DelCircleResponse, error)
	// 获取圈子的日志
	GetCircleLog(context.Context, *GetCircleLogRequest) (*GetCircleLogResponse, error)
	// 处理圈子消息
	DealMessage(context.Context, *DealMessageRequest) (*DealMessageResponse, error)
	// 处理申请
	DealApply(context.Context, *DealApplyRequest) (*DealApplyResponse, error)
	// 获取加入圈子申请
	GetApplyList(context.Context, *GetApplyListRequest) (*GetApplyListResponse, error)
	// 获取退出圈子申请
	GetQuiteList(context.Context, *GetQuiteListRequest) (*GetQuiteListResponse, error)
	// 处理用户退出申请
	DealQuit(context.Context, *DealQuitRequest) (*DealQuitResponse, error)
}

func RegisterCircleMasterServiceServer(s *grpc.Server, srv CircleMasterServiceServer) {
	s.RegisterService(&_CircleMasterService_serviceDesc, srv)
}

func _CircleMasterService_BuildCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).BuildCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/BuildCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).BuildCircle(ctx, req.(*BuildCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_UpdateCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).UpdateCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/UpdateCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).UpdateCircle(ctx, req.(*UpdateCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_GetCircleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).GetCircleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/GetCircleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).GetCircleList(ctx, req.(*GetCircleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_GetCircleMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).GetCircleMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/GetCircleMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).GetCircleMembers(ctx, req.(*GetCircleMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_DelCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).DelCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/DelCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).DelCircle(ctx, req.(*DelCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_GetCircleLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).GetCircleLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/GetCircleLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).GetCircleLog(ctx, req.(*GetCircleLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_DealMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).DealMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/DealMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).DealMessage(ctx, req.(*DealMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_DealApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).DealApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/DealApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).DealApply(ctx, req.(*DealApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_GetApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).GetApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/GetApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).GetApplyList(ctx, req.(*GetApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_GetQuiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).GetQuiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/GetQuiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).GetQuiteList(ctx, req.(*GetQuiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleMasterService_DealQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleMasterServiceServer).DealQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleMasterService/DealQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleMasterServiceServer).DealQuit(ctx, req.(*DealQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CircleMasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CircleMasterService",
	HandlerType: (*CircleMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildCircle",
			Handler:    _CircleMasterService_BuildCircle_Handler,
		},
		{
			MethodName: "UpdateCircle",
			Handler:    _CircleMasterService_UpdateCircle_Handler,
		},
		{
			MethodName: "GetCircleList",
			Handler:    _CircleMasterService_GetCircleList_Handler,
		},
		{
			MethodName: "GetCircleMembers",
			Handler:    _CircleMasterService_GetCircleMembers_Handler,
		},
		{
			MethodName: "DelCircle",
			Handler:    _CircleMasterService_DelCircle_Handler,
		},
		{
			MethodName: "GetCircleLog",
			Handler:    _CircleMasterService_GetCircleLog_Handler,
		},
		{
			MethodName: "DealMessage",
			Handler:    _CircleMasterService_DealMessage_Handler,
		},
		{
			MethodName: "DealApply",
			Handler:    _CircleMasterService_DealApply_Handler,
		},
		{
			MethodName: "GetApplyList",
			Handler:    _CircleMasterService_GetApplyList_Handler,
		},
		{
			MethodName: "GetQuiteList",
			Handler:    _CircleMasterService_GetQuiteList_Handler,
		},
		{
			MethodName: "DealQuit",
			Handler:    _CircleMasterService_DealQuit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/circle.proto",
}

// CircleUserServiceClient is the client API for CircleUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CircleUserServiceClient interface {
	// 获取圈子列表
	GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...grpc.CallOption) (*GetCircleListResponse, error)
	// 申请加入圈子
	ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, opts ...grpc.CallOption) (*ApplyJoinCircleResponse, error)
	// 获取成员列表
	GetCircleMembers(ctx context.Context, in *GetCircleMembersRequest, opts ...grpc.CallOption) (*GetCircleMembersResponse, error)
	// 获取圈子的日志
	GetCircleLog(ctx context.Context, in *GetCircleLogRequest, opts ...grpc.CallOption) (*GetCircleLogResponse, error)
	// 玩家申请离开圈子
	ApplyQuitCircle(ctx context.Context, in *ApplyQuitCircleRequest, opts ...grpc.CallOption) (*ApplyQuitCircleResponse, error)
	// 获取圈子详细信息
	GerCircleDetail(ctx context.Context, in *GerCircleDetailRequest, opts ...grpc.CallOption) (*GerCircleDetailResponse, error)
}

type circleUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewCircleUserServiceClient(cc *grpc.ClientConn) CircleUserServiceClient {
	return &circleUserServiceClient{cc}
}

func (c *circleUserServiceClient) GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...grpc.CallOption) (*GetCircleListResponse, error) {
	out := new(GetCircleListResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/GetCircleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserServiceClient) ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, opts ...grpc.CallOption) (*ApplyJoinCircleResponse, error) {
	out := new(ApplyJoinCircleResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/ApplyJoinCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserServiceClient) GetCircleMembers(ctx context.Context, in *GetCircleMembersRequest, opts ...grpc.CallOption) (*GetCircleMembersResponse, error) {
	out := new(GetCircleMembersResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/GetCircleMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserServiceClient) GetCircleLog(ctx context.Context, in *GetCircleLogRequest, opts ...grpc.CallOption) (*GetCircleLogResponse, error) {
	out := new(GetCircleLogResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/GetCircleLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserServiceClient) ApplyQuitCircle(ctx context.Context, in *ApplyQuitCircleRequest, opts ...grpc.CallOption) (*ApplyQuitCircleResponse, error) {
	out := new(ApplyQuitCircleResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/ApplyQuitCircle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserServiceClient) GerCircleDetail(ctx context.Context, in *GerCircleDetailRequest, opts ...grpc.CallOption) (*GerCircleDetailResponse, error) {
	out := new(GerCircleDetailResponse)
	err := c.cc.Invoke(ctx, "/CircleUserService/GerCircleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircleUserServiceServer is the server API for CircleUserService service.
type CircleUserServiceServer interface {
	// 获取圈子列表
	GetCircleList(context.Context, *GetCircleListRequest) (*GetCircleListResponse, error)
	// 申请加入圈子
	ApplyJoinCircle(context.Context, *ApplyJoinCircleRequest) (*ApplyJoinCircleResponse, error)
	// 获取成员列表
	GetCircleMembers(context.Context, *GetCircleMembersRequest) (*GetCircleMembersResponse, error)
	// 获取圈子的日志
	GetCircleLog(context.Context, *GetCircleLogRequest) (*GetCircleLogResponse, error)
	// 玩家申请离开圈子
	ApplyQuitCircle(context.Context, *ApplyQuitCircleRequest) (*ApplyQuitCircleResponse, error)
	// 获取圈子详细信息
	GerCircleDetail(context.Context, *GerCircleDetailRequest) (*GerCircleDetailResponse, error)
}

func RegisterCircleUserServiceServer(s *grpc.Server, srv CircleUserServiceServer) {
	s.RegisterService(&_CircleUserService_serviceDesc, srv)
}

func _CircleUserService_GetCircleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).GetCircleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/GetCircleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).GetCircleList(ctx, req.(*GetCircleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleUserService_ApplyJoinCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyJoinCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).ApplyJoinCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/ApplyJoinCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).ApplyJoinCircle(ctx, req.(*ApplyJoinCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleUserService_GetCircleMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).GetCircleMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/GetCircleMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).GetCircleMembers(ctx, req.(*GetCircleMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleUserService_GetCircleLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).GetCircleLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/GetCircleLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).GetCircleLog(ctx, req.(*GetCircleLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleUserService_ApplyQuitCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyQuitCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).ApplyQuitCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/ApplyQuitCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).ApplyQuitCircle(ctx, req.(*ApplyQuitCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleUserService_GerCircleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GerCircleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleUserServiceServer).GerCircleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CircleUserService/GerCircleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleUserServiceServer).GerCircleDetail(ctx, req.(*GerCircleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CircleUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CircleUserService",
	HandlerType: (*CircleUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCircleList",
			Handler:    _CircleUserService_GetCircleList_Handler,
		},
		{
			MethodName: "ApplyJoinCircle",
			Handler:    _CircleUserService_ApplyJoinCircle_Handler,
		},
		{
			MethodName: "GetCircleMembers",
			Handler:    _CircleUserService_GetCircleMembers_Handler,
		},
		{
			MethodName: "GetCircleLog",
			Handler:    _CircleUserService_GetCircleLog_Handler,
		},
		{
			MethodName: "ApplyQuitCircle",
			Handler:    _CircleUserService_ApplyQuitCircle_Handler,
		},
		{
			MethodName: "GerCircleDetail",
			Handler:    _CircleUserService_GerCircleDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/circle.proto",
}
