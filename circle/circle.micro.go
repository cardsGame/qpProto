// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: circle/circle.proto

/*
Package circle is a generated protocol buffer package.

It is generated from these files:
	circle/circle.proto

It has these top-level messages:
	BuildCircleRequest
	BuildCircleResponse
	UpdateCircleRequest
	UpdateCircleResponse
	GetCircleListRequest
	GetCircleListResponse
	DelCircleRequest
	DelCircleResponse
	ApplyJoinCircleRequest
	ApplyJoinCircleResponse
	GetCircleMsgRequest
	GetCircleMsgResponse
	DealApplyRequest
	DealApplyResponse
	DealMessageRequest
	DealMessageResponse
	GetApplyListRequest
	GetApplyListResponse
	CircleUser
	User
	CircleMsg
	Circle
*/
package circle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CircleMasterService service

type CircleMasterService interface {
	// 创建
	BuildCircle(ctx context.Context, in *BuildCircleRequest, opts ...client.CallOption) (*BuildCircleResponse, error)
	// 更新
	UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...client.CallOption) (*UpdateCircleResponse, error)
	// 获取列表
	GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...client.CallOption) (*GetCircleListResponse, error)
	// 删除圈子
	DelCircle(ctx context.Context, in *DelCircleRequest, opts ...client.CallOption) (*DelCircleResponse, error)
	// 获取圈子的消息
	GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, opts ...client.CallOption) (*GetCircleMsgResponse, error)
	// 处理圈子消息
	DealMessage(ctx context.Context, in *DealMessageRequest, opts ...client.CallOption) (*DealMessageResponse, error)
	// 处理申请
	DealApply(ctx context.Context, in *DealApplyRequest, opts ...client.CallOption) (*DealApplyResponse, error)
	// 获取申请
	GetApplyList(ctx context.Context, in *GetApplyListRequest, opts ...client.CallOption) (*GetApplyListResponse, error)
}

type circleMasterService struct {
	c    client.Client
	name string
}

func NewCircleMasterService(name string, c client.Client) CircleMasterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "circlemasterservice"
	}
	return &circleMasterService{
		c:    c,
		name: name,
	}
}

func (c *circleMasterService) BuildCircle(ctx context.Context, in *BuildCircleRequest, opts ...client.CallOption) (*BuildCircleResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.BuildCircle", in)
	out := new(BuildCircleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...client.CallOption) (*UpdateCircleResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.UpdateCircle", in)
	out := new(UpdateCircleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...client.CallOption) (*GetCircleListResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.GetCircleList", in)
	out := new(GetCircleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) DelCircle(ctx context.Context, in *DelCircleRequest, opts ...client.CallOption) (*DelCircleResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.DelCircle", in)
	out := new(DelCircleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, opts ...client.CallOption) (*GetCircleMsgResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.GetCircleMessage", in)
	out := new(GetCircleMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) DealMessage(ctx context.Context, in *DealMessageRequest, opts ...client.CallOption) (*DealMessageResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.DealMessage", in)
	out := new(DealMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) DealApply(ctx context.Context, in *DealApplyRequest, opts ...client.CallOption) (*DealApplyResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.DealApply", in)
	out := new(DealApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleMasterService) GetApplyList(ctx context.Context, in *GetApplyListRequest, opts ...client.CallOption) (*GetApplyListResponse, error) {
	req := c.c.NewRequest(c.name, "CircleMasterService.GetApplyList", in)
	out := new(GetApplyListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CircleMasterService service

type CircleMasterServiceHandler interface {
	// 创建
	BuildCircle(context.Context, *BuildCircleRequest, *BuildCircleResponse) error
	// 更新
	UpdateCircle(context.Context, *UpdateCircleRequest, *UpdateCircleResponse) error
	// 获取列表
	GetCircleList(context.Context, *GetCircleListRequest, *GetCircleListResponse) error
	// 删除圈子
	DelCircle(context.Context, *DelCircleRequest, *DelCircleResponse) error
	// 获取圈子的消息
	GetCircleMessage(context.Context, *GetCircleMsgRequest, *GetCircleMsgResponse) error
	// 处理圈子消息
	DealMessage(context.Context, *DealMessageRequest, *DealMessageResponse) error
	// 处理申请
	DealApply(context.Context, *DealApplyRequest, *DealApplyResponse) error
	// 获取申请
	GetApplyList(context.Context, *GetApplyListRequest, *GetApplyListResponse) error
}

func RegisterCircleMasterServiceHandler(s server.Server, hdlr CircleMasterServiceHandler, opts ...server.HandlerOption) error {
	type circleMasterService interface {
		BuildCircle(ctx context.Context, in *BuildCircleRequest, out *BuildCircleResponse) error
		UpdateCircle(ctx context.Context, in *UpdateCircleRequest, out *UpdateCircleResponse) error
		GetCircleList(ctx context.Context, in *GetCircleListRequest, out *GetCircleListResponse) error
		DelCircle(ctx context.Context, in *DelCircleRequest, out *DelCircleResponse) error
		GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, out *GetCircleMsgResponse) error
		DealMessage(ctx context.Context, in *DealMessageRequest, out *DealMessageResponse) error
		DealApply(ctx context.Context, in *DealApplyRequest, out *DealApplyResponse) error
		GetApplyList(ctx context.Context, in *GetApplyListRequest, out *GetApplyListResponse) error
	}
	type CircleMasterService struct {
		circleMasterService
	}
	h := &circleMasterServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CircleMasterService{h}, opts...))
}

type circleMasterServiceHandler struct {
	CircleMasterServiceHandler
}

func (h *circleMasterServiceHandler) BuildCircle(ctx context.Context, in *BuildCircleRequest, out *BuildCircleResponse) error {
	return h.CircleMasterServiceHandler.BuildCircle(ctx, in, out)
}

func (h *circleMasterServiceHandler) UpdateCircle(ctx context.Context, in *UpdateCircleRequest, out *UpdateCircleResponse) error {
	return h.CircleMasterServiceHandler.UpdateCircle(ctx, in, out)
}

func (h *circleMasterServiceHandler) GetCircleList(ctx context.Context, in *GetCircleListRequest, out *GetCircleListResponse) error {
	return h.CircleMasterServiceHandler.GetCircleList(ctx, in, out)
}

func (h *circleMasterServiceHandler) DelCircle(ctx context.Context, in *DelCircleRequest, out *DelCircleResponse) error {
	return h.CircleMasterServiceHandler.DelCircle(ctx, in, out)
}

func (h *circleMasterServiceHandler) GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, out *GetCircleMsgResponse) error {
	return h.CircleMasterServiceHandler.GetCircleMessage(ctx, in, out)
}

func (h *circleMasterServiceHandler) DealMessage(ctx context.Context, in *DealMessageRequest, out *DealMessageResponse) error {
	return h.CircleMasterServiceHandler.DealMessage(ctx, in, out)
}

func (h *circleMasterServiceHandler) DealApply(ctx context.Context, in *DealApplyRequest, out *DealApplyResponse) error {
	return h.CircleMasterServiceHandler.DealApply(ctx, in, out)
}

func (h *circleMasterServiceHandler) GetApplyList(ctx context.Context, in *GetApplyListRequest, out *GetApplyListResponse) error {
	return h.CircleMasterServiceHandler.GetApplyList(ctx, in, out)
}

// Client API for CircleUserService service

type CircleUserService interface {
	// 获取列表
	GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...client.CallOption) (*GetCircleListResponse, error)
	// 申请加入圈子
	ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, opts ...client.CallOption) (*ApplyJoinCircleResponse, error)
	// 获取圈子的消息
	GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, opts ...client.CallOption) (*GetCircleMsgResponse, error)
}

type circleUserService struct {
	c    client.Client
	name string
}

func NewCircleUserService(name string, c client.Client) CircleUserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "circleuserservice"
	}
	return &circleUserService{
		c:    c,
		name: name,
	}
}

func (c *circleUserService) GetCircleList(ctx context.Context, in *GetCircleListRequest, opts ...client.CallOption) (*GetCircleListResponse, error) {
	req := c.c.NewRequest(c.name, "CircleUserService.GetCircleList", in)
	out := new(GetCircleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserService) ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, opts ...client.CallOption) (*ApplyJoinCircleResponse, error) {
	req := c.c.NewRequest(c.name, "CircleUserService.ApplyJoinCircle", in)
	out := new(ApplyJoinCircleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleUserService) GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, opts ...client.CallOption) (*GetCircleMsgResponse, error) {
	req := c.c.NewRequest(c.name, "CircleUserService.GetCircleMessage", in)
	out := new(GetCircleMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CircleUserService service

type CircleUserServiceHandler interface {
	// 获取列表
	GetCircleList(context.Context, *GetCircleListRequest, *GetCircleListResponse) error
	// 申请加入圈子
	ApplyJoinCircle(context.Context, *ApplyJoinCircleRequest, *ApplyJoinCircleResponse) error
	// 获取圈子的消息
	GetCircleMessage(context.Context, *GetCircleMsgRequest, *GetCircleMsgResponse) error
}

func RegisterCircleUserServiceHandler(s server.Server, hdlr CircleUserServiceHandler, opts ...server.HandlerOption) error {
	type circleUserService interface {
		GetCircleList(ctx context.Context, in *GetCircleListRequest, out *GetCircleListResponse) error
		ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, out *ApplyJoinCircleResponse) error
		GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, out *GetCircleMsgResponse) error
	}
	type CircleUserService struct {
		circleUserService
	}
	h := &circleUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CircleUserService{h}, opts...))
}

type circleUserServiceHandler struct {
	CircleUserServiceHandler
}

func (h *circleUserServiceHandler) GetCircleList(ctx context.Context, in *GetCircleListRequest, out *GetCircleListResponse) error {
	return h.CircleUserServiceHandler.GetCircleList(ctx, in, out)
}

func (h *circleUserServiceHandler) ApplyJoinCircle(ctx context.Context, in *ApplyJoinCircleRequest, out *ApplyJoinCircleResponse) error {
	return h.CircleUserServiceHandler.ApplyJoinCircle(ctx, in, out)
}

func (h *circleUserServiceHandler) GetCircleMessage(ctx context.Context, in *GetCircleMsgRequest, out *GetCircleMsgResponse) error {
	return h.CircleUserServiceHandler.GetCircleMessage(ctx, in, out)
}
