// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: audio/audio.proto

/*
Package audio is a generated protocol buffer package.

It is generated from these files:
	audio/audio.proto

It has these top-level messages:
	UploadVoiceRequest
	UploadVoiceResponse
	DownloadVoiceRequest
	DownloadVoiceResponse
*/
package audio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Audio service

type AudioService interface {
	// 上传语音
	UploadVoice(ctx context.Context, in *UploadVoiceRequest, opts ...client.CallOption) (*UploadVoiceResponse, error)
	// 下载语音
	DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, opts ...client.CallOption) (*DownloadVoiceResponse, error)
}

type audioService struct {
	c    client.Client
	name string
}

func NewAudioService(name string, c client.Client) AudioService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "audio"
	}
	return &audioService{
		c:    c,
		name: name,
	}
}

func (c *audioService) UploadVoice(ctx context.Context, in *UploadVoiceRequest, opts ...client.CallOption) (*UploadVoiceResponse, error) {
	req := c.c.NewRequest(c.name, "Audio.UploadVoice", in)
	out := new(UploadVoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioService) DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, opts ...client.CallOption) (*DownloadVoiceResponse, error) {
	req := c.c.NewRequest(c.name, "Audio.DownloadVoice", in)
	out := new(DownloadVoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Audio service

type AudioHandler interface {
	// 上传语音
	UploadVoice(context.Context, *UploadVoiceRequest, *UploadVoiceResponse) error
	// 下载语音
	DownloadVoice(context.Context, *DownloadVoiceRequest, *DownloadVoiceResponse) error
}

func RegisterAudioHandler(s server.Server, hdlr AudioHandler, opts ...server.HandlerOption) error {
	type audio interface {
		UploadVoice(ctx context.Context, in *UploadVoiceRequest, out *UploadVoiceResponse) error
		DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, out *DownloadVoiceResponse) error
	}
	type Audio struct {
		audio
	}
	h := &audioHandler{hdlr}
	return s.Handle(s.NewHandler(&Audio{h}, opts...))
}

type audioHandler struct {
	AudioHandler
}

func (h *audioHandler) UploadVoice(ctx context.Context, in *UploadVoiceRequest, out *UploadVoiceResponse) error {
	return h.AudioHandler.UploadVoice(ctx, in, out)
}

func (h *audioHandler) DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, out *DownloadVoiceResponse) error {
	return h.AudioHandler.DownloadVoice(ctx, in, out)
}
