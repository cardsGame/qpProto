syntax = "proto3";
package friendRoom;
import "github.com/cardsGame/qpProto/room/room.proto";
import "github.com/cardsGame/qpProto/zlmj/zlmj.proto";

service FriendRoom {
    rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
    rpc GetPlaying(GetPlayingRequest) returns(GetPlayingResponse) {}
    rpc Stream(stream Message) returns(stream Message) {}
}

// 房间选项
message RoomOption {
    bool autoSit = 1; // 是否自动坐下
    room.RoomPay payType = 2; // 支付类型
    int32 totalRound = 3; // 总局数
    int32 totalTime = 4; // 总时长
    bool needReady = 5; // 是否需要准备
    bool ipRaging = 6; // ip测距
    bool gpsRaging = 7; // gps测距
    int32 totalPlayerCount = 8;
    int32 totalCircle = 9; // 圈数
}

// 房间状态
enum RoomState {
    wait_join = 0; // 等待加入
    in_game = 1; // 游戏中
    wait_ready = 2; // 小结算等待准备
    over = 3; // 结束
}

// 房间限制类型
enum RoomLimit {
    limit_round = 0; // 限局
    limit_time = 1; // 限时
    limit_circle = 2; // 限圈
}

message PlayerData {
    int32 userId = 1;
    string headImgUrl = 2;
    int32 gender = 3;
    string nickName = 4;
    bool isOnline = 5;
    room.RoomPlayerRole role = 6;
    bool isReady = 7;
    bool dissolveAgreed = 8;
    bool dissolveAnswered = 9;
    float longitude = 10;
    float latitude = 11;
    string ip = 12;
}

// 房间数据
message RoomData {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
    RoomState state = 4;
    bool isStart = 5;
    repeated PlayerData players = 6;
    RoomOption option = 7;
    int32 ownerUserId = 8;
    int32 dissolveLeft = 9;
    int32 dissolveStartUserId = 10;
    int32 curRound = 11; // 当前局数
    int32 curCircle = 12; // 当前圈数
}

// 创建房间请求
message CreateRoomRequest{
    room.GameType gameType = 1;
    RoomOption roomOption = 2;
    oneof gameOption {
        zlmj.Option zlmj = 3;
    }
}

// 创建亲友圈房间请求
message CreateCircleRoomRequest {
    room.GameType gameType = 1;
    RoomOption roomOption = 2;
    oneof gameOption {
        zlmj.Option zlmj = 3;
    }
    string circleNo = 4; // 亲友圈号
}

// 创建房间响应
message CreateRoomResponse {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
}

// 创建亲友圈房间响应
message CreateCircleRoomResponse {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
}

// 获取进行中房间请求
message GetPlayingRequest {

}

// 获取进行中房间响应
message GetPlayingResponse {
    repeated PlayingRoom rooms = 1;
}

// 进行中的房间
message PlayingRoom {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
}

message Message {
    oneof message {
        Req req = 1;
        Rsp rsp = 2;
        Event event = 3;
    }
}

message Req {
    oneof req {
        EnterRoomReq enterRoomReq = 1;
        ReadyReq readyReq = 2;
        SitdownReq sitdownReq = 3;
        StandupReq standupReq = 4;
        ChangesitReq changesitReq = 5;
        LeaveReq leaveReq = 6;
        OfflineReq offlineReq = 7;
        UploadLocationReq uploadLocationReq = 8;
        RequestDissolveReq requestDissolveReq = 9;
        ReplyDissolveReq replyDissolveReq = 10;
        TextChatReq textChatReq = 11;
        QuickChatReq quickChatReq = 12;
        EmojiChatReq emojiChatReq = 13;
        VoiceChatReq voiceChatReq = 14;
        StartReq startReq = 15;
        CreateRoomRequest createRoomRequest = 16;
        CreateCircleRoomRequest createCircleRoomRequest = 17;
    }

    oneof gameReq {
        zlmj.Req zlmj = 100;
    }
}

message Rsp {
    oneof rsp {
        ErrorRsp errorRsp = 1;
        EnterRoomRsp enterRoomRsp = 2;
        CreateRoomResponse createRoomResponse = 3;
        CreateCircleRoomResponse createCircleRoomResponse = 4;
    }

    oneof gameRsp {
        zlmj.Rsp zlmj = 100;
    }
}

message Event {
    oneof event {
        PlayerEnterEvent playerEnterEvent = 1;
        PlayerOfflineEvent playerOfflineEvent = 2;
        PlayerOnlineEvent playerOnlineEvent = 3;
        PlayerLeaveEvent playerLeaveEvent = 4;
        PlayerSitDownEvent playerSitDownEvent = 5;
        PlayerStandUpEvent playerStandUpEvent = 6;
        PlayerChangeSeatEvent playerChangeSeatEvent = 7;
        PlayerUploadLocationEvent playerUploadLocationEvent = 8;
        PlayerReadyEvent playerReadyEvent = 9;
        PlayerRequestDissolveEvent playerRequestDissolveEvent = 10;
        PlayerReplyDissolveEvent playerReplyDissolveEvent = 11;
        CancelDissolveEvent cancelDissolveEvent = 12;
        PlayerTextChatEvent playerTextChatEvent = 13;
        PlayerQuickChatEvent playerQuickChatEvent = 14;
        PlayerEmojiChatEvent playerEmojiChatEvent = 15;
        PlayerVoiceChatEvent playerVoiceChatEvent = 16;
        RoomReadyEvent roomReadyEvent = 17;
        RoomOverEvent roomOverEvent = 18;
    }

    oneof gameEvent {
        zlmj.Event zlmj = 100;
    }
}


// region 请求
// 文字聊天请求
message TextChatReq {
    int32 userId = 1;
    string text = 2;
}

// 快捷聊天请求
message QuickChatReq {
    int32 userId = 1;
    int32 chatId = 2;
}

// 表情聊天请求
message EmojiChatReq {
    int32 userId = 1;
    int32 emojiId = 2;
}

// 语音聊天请求
message VoiceChatReq {
    int32 userId = 1;
    string voiceId = 2;
    int32 seconds = 3;
}

// 进入请求
message EnterRoomReq {
    string roomNo = 1;
}

// 准备请求
message ReadyReq {

}

// 开始房间请求
message StartReq {

}

// 坐下请求
message SitdownReq {
    int32 index = 1;
}

// 站起请求
message StandupReq {

}

// 换座位请求
message ChangesitReq {
    int32 index = 1;
}

// 离开请求
message LeaveReq {

}

// 断线
message OfflineReq {

}

// 上报位置请求
message UploadLocationReq {
    float latitude = 1;
    float longitude = 2;
}

// 请求解散请求
message RequestDissolveReq {

}

// 回应解散请求
message ReplyDissolveReq {
    bool agree = 1;
}
// endregion


// region 响应
// 错误响应
message ErrorRsp {
    int32 code = 1;
    string message = 2;
}

// 进入房间响应
message EnterRoomRsp {
    RoomData room = 1;
    oneof game {
        zlmj.GameData zlmj = 2;
    }
}
// endregion

// region 事件
// 玩家进入事件
message PlayerEnterEvent {
    PlayerData roomPlayer = 1;
    oneof gamePlayer{
        zlmj.PlayerData zlmj = 2;
    }
}

// 玩家离线事件
message PlayerOfflineEvent {
    int32 userId = 1;
}

// 玩家上线事件
message PlayerOnlineEvent {
    int32 userId = 1;
}

// 玩家离开事件
message PlayerLeaveEvent {
    int32 userId = 1;
}

// 玩家坐下事件
message PlayerSitDownEvent {
    int32 userId = 1;
    int32 index = 2;
}

// 玩家站起事件
message PlayerStandUpEvent {
    int32 userId = 1;
    int32 index = 2;
}

// 玩家换座位事件
message PlayerChangeSeatEvent {
    int32 userId = 1;
    int32 index = 2;
}

// 玩家上传位置事件
message PlayerUploadLocationEvent {
    int32 userId = 1;
    float latitude = 2;
    float longitude = 3;
}

// 玩家准备事件
message PlayerReadyEvent {
    int32 userId = 1;
}

// 玩家请求解散事件
message PlayerRequestDissolveEvent {
    int32 userId = 1;
    int32 dissolveLeft = 2;
}

// 玩家回应解散事件
message PlayerReplyDissolveEvent {
    int32 userId = 1;
    bool agree = 2;
}

// 解散被取消事件
message CancelDissolveEvent {

}

// 玩家文字聊天事件
message PlayerTextChatEvent {
    int32 userId = 1;
    string text = 2;
}

// 玩家快捷短语聊天事件
message PlayerQuickChatEvent {
    int32 userId = 1;
    int32 chatId = 2;
}

// 玩家表情聊天事件
message PlayerEmojiChatEvent {
    int32 userId = 1;
    int32 emojiId = 2;
}

// 玩家语音聊天事件
message PlayerVoiceChatEvent {
    int32 userId = 1;
    string voiceId = 2;
    int32 seconds = 3;
}

// 房间准备开始事件
message RoomReadyEvent {
    RoomState state = 1;
}

// 房间结束事件
message RoomOverEvent {
    RoomState state = 1;
    room.RoomOverType overType = 2;
}
// endregion
