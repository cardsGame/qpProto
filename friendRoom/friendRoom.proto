syntax = "proto3";
package friendRoom;
import "github.com/cardsGame/qpProto/room/room.proto";

service FriendRoom {
    rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
    rpc GetPlaying(GetPlayingRequest) returns(GetPlayingResponse) {}
    rpc Stream(stream Message) returns(stream Message) {}
}

// 双向流传输数据类型
enum MessageType {
    error = 0; // 错误类型
    enter = 1; // 进入
    ready = 2;
    sit_down = 3; // 坐下
    stand_up = 4; // 站起
    change_seat = 5; // 换座位
    leave = 6; // 离开
    offline = 7; // 离线
    upload_location = 8; // 上报位置
    request_dissolve = 9; // 申请解散
    reply_dissolve = 10; // 回应解散
}

// 双向流传输数据
message Message {
    MessageType type = 1;
    string data = 2;
}

// 创建房间请求
message CreateRoomRequest{
    room.GameType gameType = 1;
    RoomOption roomOption = 2;
    //    oneof game_option {
    //        ZLMJGameOption zlmj_option = 3;
    //        DDZGameOption ddz_option = 4;
    //    }
}

// 创建房间响应
message CreateRoomResponse {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
}

// 获取进行中房间请求
message GetPlayingRequest {

}

// 获取进行中房间响应
message GetPlayingResponse {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
}


// 房间选项
message RoomOption {
    bool autoSit = 1; // 是否自动坐下
    room.RoomPay payType = 2; // 支付类型
    int32 totalRound = 3; // 总局数
    int32 totalTime = 4; // 总时长
    bool needReady = 5; // 是否需要准备
}

// 房间状态
enum RoomState {
    wait_join = 0; // 等待加入
    in_game = 1; // 游戏中
    wait_ready = 2; // 小结算等待准备
    over = 3; // 结束
}

// 房间限制类型
enum RoomLimit {
    limit_round = 0; // 限局
    limit_time = 1; // 限时
}

/****************** 消息号请求 *******************/
// 进入请求
message EnterRoomReq {
    string roomNo = 1;
}

// 准备请求
message ReadyReq {

}

// 坐下请求
message SitdownReq {
    int32 index = 1;
}

// 站起请求
message StandupReq {

}

// 换座位请求
message ChangesitReq {
    int32 index = 1;
}

// 离开请求
message LeaveReq {

}

// 断线
message OfflineReq {
    int32 userId = 1;
}

// 上报位置请求
message UploadLocationReq {
    float latitude = 1;
    float longitude = 2;
}

// 请求解散请求
message RequestDissolveReq {

}

// 回应解散请求
message ReplyDissolveReq {
    bool agree = 1;
}

/****************** 消息号请求 *******************/

/****************** 服务端推送数据 *******************/

message Room {
    RoomData room = 1;
    GameData game = 2;
}

// 房间数据
message RoomData {
    string roomNo = 1;
    room.GameType gameType = 2;
    room.RoomType roomType = 3;
    RoomState state = 4;
    bool isStart = 5;
    repeated Roomplayer players = 6;
    RoomOption option = 7;
    int32 ownerUserId = 8;
    int32 dissolveLeft = 9;
    int32 dissolveStartUserId = 10;
    int32 curRound = 11;
}

message GameData {
    repeated GamePlayer players = 1;
}

// 错误结构
message Error {
    int32 code = 1;
    string message = 2;
}

message Roomplayer {
    int32 userId = 1;
    string headImgUrl = 2;
    int32 gender = 3;
    string nickName = 4;
    bool isOnline = 5;
    room.RoomPlayerRole role = 6;
    bool isReady = 7;
}

message GamePlayer {
    int32 userId = 1;
    int32 index = 2;
}

// 玩家进入
message PlayerEnter {
    Roomplayer roomPlayer = 1;
    GamePlayer gamePlayer = 2;
}

/****************** 服务端推送数据 *******************/