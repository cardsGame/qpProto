// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: marquee/marquee.proto

/*
Package marquee is a generated protocol buffer package.

It is generated from these files:
	marquee/marquee.proto

It has these top-level messages:
	GetMarqueeListRequest
	GetMarqueeListResponse
	CreateMarqueeRequest
	DeleteMarqueeRequest
	UpdateMarqueeRequest
	MarqueeData
*/
package marquee

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Marquee service

type MarqueeService interface {
	GetMarqueeList(ctx context.Context, in *GetMarqueeListRequest, opts ...client.CallOption) (*GetMarqueeListResponse, error)
	CreateMarquee(ctx context.Context, in *CreateMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error)
	UpdateMarquee(ctx context.Context, in *UpdateMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error)
	DeleteMarquee(ctx context.Context, in *DeleteMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error)
}

type marqueeService struct {
	c    client.Client
	name string
}

func NewMarqueeService(name string, c client.Client) MarqueeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "marquee"
	}
	return &marqueeService{
		c:    c,
		name: name,
	}
}

func (c *marqueeService) GetMarqueeList(ctx context.Context, in *GetMarqueeListRequest, opts ...client.CallOption) (*GetMarqueeListResponse, error) {
	req := c.c.NewRequest(c.name, "Marquee.GetMarqueeList", in)
	out := new(GetMarqueeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marqueeService) CreateMarquee(ctx context.Context, in *CreateMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error) {
	req := c.c.NewRequest(c.name, "Marquee.CreateMarquee", in)
	out := new(MarqueeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marqueeService) UpdateMarquee(ctx context.Context, in *UpdateMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error) {
	req := c.c.NewRequest(c.name, "Marquee.UpdateMarquee", in)
	out := new(MarqueeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marqueeService) DeleteMarquee(ctx context.Context, in *DeleteMarqueeRequest, opts ...client.CallOption) (*MarqueeData, error) {
	req := c.c.NewRequest(c.name, "Marquee.DeleteMarquee", in)
	out := new(MarqueeData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Marquee service

type MarqueeHandler interface {
	GetMarqueeList(context.Context, *GetMarqueeListRequest, *GetMarqueeListResponse) error
	CreateMarquee(context.Context, *CreateMarqueeRequest, *MarqueeData) error
	UpdateMarquee(context.Context, *UpdateMarqueeRequest, *MarqueeData) error
	DeleteMarquee(context.Context, *DeleteMarqueeRequest, *MarqueeData) error
}

func RegisterMarqueeHandler(s server.Server, hdlr MarqueeHandler, opts ...server.HandlerOption) error {
	type marquee interface {
		GetMarqueeList(ctx context.Context, in *GetMarqueeListRequest, out *GetMarqueeListResponse) error
		CreateMarquee(ctx context.Context, in *CreateMarqueeRequest, out *MarqueeData) error
		UpdateMarquee(ctx context.Context, in *UpdateMarqueeRequest, out *MarqueeData) error
		DeleteMarquee(ctx context.Context, in *DeleteMarqueeRequest, out *MarqueeData) error
	}
	type Marquee struct {
		marquee
	}
	h := &marqueeHandler{hdlr}
	return s.Handle(s.NewHandler(&Marquee{h}, opts...))
}

type marqueeHandler struct {
	MarqueeHandler
}

func (h *marqueeHandler) GetMarqueeList(ctx context.Context, in *GetMarqueeListRequest, out *GetMarqueeListResponse) error {
	return h.MarqueeHandler.GetMarqueeList(ctx, in, out)
}

func (h *marqueeHandler) CreateMarquee(ctx context.Context, in *CreateMarqueeRequest, out *MarqueeData) error {
	return h.MarqueeHandler.CreateMarquee(ctx, in, out)
}

func (h *marqueeHandler) UpdateMarquee(ctx context.Context, in *UpdateMarqueeRequest, out *MarqueeData) error {
	return h.MarqueeHandler.UpdateMarquee(ctx, in, out)
}

func (h *marqueeHandler) DeleteMarquee(ctx context.Context, in *DeleteMarqueeRequest, out *MarqueeData) error {
	return h.MarqueeHandler.DeleteMarquee(ctx, in, out)
}
