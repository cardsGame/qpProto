// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user/user.proto

It has these top-level messages:
	AuthLocalRequest
	AuthWxH5Request
	PayloadToken
	SignInGameRequest
	VerifyTokenRequest
	VerifyTokenResponse
	GetDetailInfoRequest
	GetAllUserRequest
	GetAllUserResponse
	AddItemsRequest
	UserUpdate
	Item
	UserInfo
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserQuery service

type UserQueryService interface {
	// 获取某个用户的详细信息
	GetDetailInfo(ctx context.Context, in *GetDetailInfoRequest, opts ...client.CallOption) (*UserInfo, error)
	// 获取所有用户
	GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...client.CallOption) (*GetAllUserResponse, error)
}

type userQueryService struct {
	c    client.Client
	name string
}

func NewUserQueryService(name string, c client.Client) UserQueryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userquery"
	}
	return &userQueryService{
		c:    c,
		name: name,
	}
}

func (c *userQueryService) GetDetailInfo(ctx context.Context, in *GetDetailInfoRequest, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "UserQuery.GetDetailInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQueryService) GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...client.CallOption) (*GetAllUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserQuery.GetAllUser", in)
	out := new(GetAllUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserQuery service

type UserQueryHandler interface {
	// 获取某个用户的详细信息
	GetDetailInfo(context.Context, *GetDetailInfoRequest, *UserInfo) error
	// 获取所有用户
	GetAllUser(context.Context, *GetAllUserRequest, *GetAllUserResponse) error
}

func RegisterUserQueryHandler(s server.Server, hdlr UserQueryHandler, opts ...server.HandlerOption) error {
	type userQuery interface {
		GetDetailInfo(ctx context.Context, in *GetDetailInfoRequest, out *UserInfo) error
		GetAllUser(ctx context.Context, in *GetAllUserRequest, out *GetAllUserResponse) error
	}
	type UserQuery struct {
		userQuery
	}
	h := &userQueryHandler{hdlr}
	return s.Handle(s.NewHandler(&UserQuery{h}, opts...))
}

type userQueryHandler struct {
	UserQueryHandler
}

func (h *userQueryHandler) GetDetailInfo(ctx context.Context, in *GetDetailInfoRequest, out *UserInfo) error {
	return h.UserQueryHandler.GetDetailInfo(ctx, in, out)
}

func (h *userQueryHandler) GetAllUser(ctx context.Context, in *GetAllUserRequest, out *GetAllUserResponse) error {
	return h.UserQueryHandler.GetAllUser(ctx, in, out)
}

// Client API for UserBiz service

type UserBizService interface {
	// 给玩家增加物品
	AddItems(ctx context.Context, in *AddItemsRequest, opts ...client.CallOption) (*UserUpdate, error)
}

type userBizService struct {
	c    client.Client
	name string
}

func NewUserBizService(name string, c client.Client) UserBizService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userbiz"
	}
	return &userBizService{
		c:    c,
		name: name,
	}
}

func (c *userBizService) AddItems(ctx context.Context, in *AddItemsRequest, opts ...client.CallOption) (*UserUpdate, error) {
	req := c.c.NewRequest(c.name, "UserBiz.AddItems", in)
	out := new(UserUpdate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBiz service

type UserBizHandler interface {
	// 给玩家增加物品
	AddItems(context.Context, *AddItemsRequest, *UserUpdate) error
}

func RegisterUserBizHandler(s server.Server, hdlr UserBizHandler, opts ...server.HandlerOption) error {
	type userBiz interface {
		AddItems(ctx context.Context, in *AddItemsRequest, out *UserUpdate) error
	}
	type UserBiz struct {
		userBiz
	}
	h := &userBizHandler{hdlr}
	return s.Handle(s.NewHandler(&UserBiz{h}, opts...))
}

type userBizHandler struct {
	UserBizHandler
}

func (h *userBizHandler) AddItems(ctx context.Context, in *AddItemsRequest, out *UserUpdate) error {
	return h.UserBizHandler.AddItems(ctx, in, out)
}

// Client API for UserAuth service

type UserAuthService interface {
	// 通过本地认证
	AuthLocal(ctx context.Context, in *AuthLocalRequest, opts ...client.CallOption) (*PayloadToken, error)
	// 通过微信h5登录认证
	AuthWxH5(ctx context.Context, in *AuthWxH5Request, opts ...client.CallOption) (*PayloadToken, error)
	// 登录游戏
	SignInGame(ctx context.Context, in *SignInGameRequest, opts ...client.CallOption) (*UserInfo, error)
	// 验证token
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*PayloadToken, error)
}

type userAuthService struct {
	c    client.Client
	name string
}

func NewUserAuthService(name string, c client.Client) UserAuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userauth"
	}
	return &userAuthService{
		c:    c,
		name: name,
	}
}

func (c *userAuthService) AuthLocal(ctx context.Context, in *AuthLocalRequest, opts ...client.CallOption) (*PayloadToken, error) {
	req := c.c.NewRequest(c.name, "UserAuth.AuthLocal", in)
	out := new(PayloadToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthService) AuthWxH5(ctx context.Context, in *AuthWxH5Request, opts ...client.CallOption) (*PayloadToken, error) {
	req := c.c.NewRequest(c.name, "UserAuth.AuthWxH5", in)
	out := new(PayloadToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthService) SignInGame(ctx context.Context, in *SignInGameRequest, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "UserAuth.SignInGame", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthService) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*PayloadToken, error) {
	req := c.c.NewRequest(c.name, "UserAuth.VerifyToken", in)
	out := new(PayloadToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuth service

type UserAuthHandler interface {
	// 通过本地认证
	AuthLocal(context.Context, *AuthLocalRequest, *PayloadToken) error
	// 通过微信h5登录认证
	AuthWxH5(context.Context, *AuthWxH5Request, *PayloadToken) error
	// 登录游戏
	SignInGame(context.Context, *SignInGameRequest, *UserInfo) error
	// 验证token
	VerifyToken(context.Context, *VerifyTokenRequest, *PayloadToken) error
}

func RegisterUserAuthHandler(s server.Server, hdlr UserAuthHandler, opts ...server.HandlerOption) error {
	type userAuth interface {
		AuthLocal(ctx context.Context, in *AuthLocalRequest, out *PayloadToken) error
		AuthWxH5(ctx context.Context, in *AuthWxH5Request, out *PayloadToken) error
		SignInGame(ctx context.Context, in *SignInGameRequest, out *UserInfo) error
		VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *PayloadToken) error
	}
	type UserAuth struct {
		userAuth
	}
	h := &userAuthHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAuth{h}, opts...))
}

type userAuthHandler struct {
	UserAuthHandler
}

func (h *userAuthHandler) AuthLocal(ctx context.Context, in *AuthLocalRequest, out *PayloadToken) error {
	return h.UserAuthHandler.AuthLocal(ctx, in, out)
}

func (h *userAuthHandler) AuthWxH5(ctx context.Context, in *AuthWxH5Request, out *PayloadToken) error {
	return h.UserAuthHandler.AuthWxH5(ctx, in, out)
}

func (h *userAuthHandler) SignInGame(ctx context.Context, in *SignInGameRequest, out *UserInfo) error {
	return h.UserAuthHandler.SignInGame(ctx, in, out)
}

func (h *userAuthHandler) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *PayloadToken) error {
	return h.UserAuthHandler.VerifyToken(ctx, in, out)
}
