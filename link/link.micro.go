// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: link/link.proto

/*
Package link is a generated protocol buffer package.

It is generated from these files:
	link/link.proto

It has these top-level messages:
	LinkAgentRequest
	UpAgentLevelRequest
	DownAgentLevelRequest
	GetSuperiorRequest
	GetSuperiorResponse
	GetInferiorRequest
	GetInferiorResponse
	Link
	Agent
*/
package link

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LinkService service

type LinkService interface {
	// LinkAgent Bind two agent with link
	LinkAgent(ctx context.Context, in *LinkAgentRequest, opts ...client.CallOption) (*Link, error)
	// UpAgentLevel Up an agent from Level 2 to Level 1
	UpAgentLevel(ctx context.Context, in *UpAgentLevelRequest, opts ...client.CallOption) (*Link, error)
	// DownAgentLevel Down an agent from Level 1 to Level 2, but this agent don't have an Father agent
	DownAgentLevel(ctx context.Context, in *DownAgentLevelRequest, opts ...client.CallOption) (*Link, error)
	// GetSuperior get the superior info of the agent
	GetSuperior(ctx context.Context, in *GetSuperiorRequest, opts ...client.CallOption) (*GetSuperiorResponse, error)
	// GetInferior get all the inferior of the agent,will return a list.
	GetInferior(ctx context.Context, in *GetInferiorRequest, opts ...client.CallOption) (*GetInferiorResponse, error)
}

type linkService struct {
	c    client.Client
	name string
}

func NewLinkService(name string, c client.Client) LinkService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "link"
	}
	return &linkService{
		c:    c,
		name: name,
	}
}

func (c *linkService) LinkAgent(ctx context.Context, in *LinkAgentRequest, opts ...client.CallOption) (*Link, error) {
	req := c.c.NewRequest(c.name, "LinkService.LinkAgent", in)
	out := new(Link)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkService) UpAgentLevel(ctx context.Context, in *UpAgentLevelRequest, opts ...client.CallOption) (*Link, error) {
	req := c.c.NewRequest(c.name, "LinkService.UpAgentLevel", in)
	out := new(Link)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkService) DownAgentLevel(ctx context.Context, in *DownAgentLevelRequest, opts ...client.CallOption) (*Link, error) {
	req := c.c.NewRequest(c.name, "LinkService.DownAgentLevel", in)
	out := new(Link)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkService) GetSuperior(ctx context.Context, in *GetSuperiorRequest, opts ...client.CallOption) (*GetSuperiorResponse, error) {
	req := c.c.NewRequest(c.name, "LinkService.GetSuperior", in)
	out := new(GetSuperiorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkService) GetInferior(ctx context.Context, in *GetInferiorRequest, opts ...client.CallOption) (*GetInferiorResponse, error) {
	req := c.c.NewRequest(c.name, "LinkService.GetInferior", in)
	out := new(GetInferiorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LinkService service

type LinkServiceHandler interface {
	// LinkAgent Bind two agent with link
	LinkAgent(context.Context, *LinkAgentRequest, *Link) error
	// UpAgentLevel Up an agent from Level 2 to Level 1
	UpAgentLevel(context.Context, *UpAgentLevelRequest, *Link) error
	// DownAgentLevel Down an agent from Level 1 to Level 2, but this agent don't have an Father agent
	DownAgentLevel(context.Context, *DownAgentLevelRequest, *Link) error
	// GetSuperior get the superior info of the agent
	GetSuperior(context.Context, *GetSuperiorRequest, *GetSuperiorResponse) error
	// GetInferior get all the inferior of the agent,will return a list.
	GetInferior(context.Context, *GetInferiorRequest, *GetInferiorResponse) error
}

func RegisterLinkServiceHandler(s server.Server, hdlr LinkServiceHandler, opts ...server.HandlerOption) error {
	type linkService interface {
		LinkAgent(ctx context.Context, in *LinkAgentRequest, out *Link) error
		UpAgentLevel(ctx context.Context, in *UpAgentLevelRequest, out *Link) error
		DownAgentLevel(ctx context.Context, in *DownAgentLevelRequest, out *Link) error
		GetSuperior(ctx context.Context, in *GetSuperiorRequest, out *GetSuperiorResponse) error
		GetInferior(ctx context.Context, in *GetInferiorRequest, out *GetInferiorResponse) error
	}
	type LinkService struct {
		linkService
	}
	h := &linkServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LinkService{h}, opts...))
}

type linkServiceHandler struct {
	LinkServiceHandler
}

func (h *linkServiceHandler) LinkAgent(ctx context.Context, in *LinkAgentRequest, out *Link) error {
	return h.LinkServiceHandler.LinkAgent(ctx, in, out)
}

func (h *linkServiceHandler) UpAgentLevel(ctx context.Context, in *UpAgentLevelRequest, out *Link) error {
	return h.LinkServiceHandler.UpAgentLevel(ctx, in, out)
}

func (h *linkServiceHandler) DownAgentLevel(ctx context.Context, in *DownAgentLevelRequest, out *Link) error {
	return h.LinkServiceHandler.DownAgentLevel(ctx, in, out)
}

func (h *linkServiceHandler) GetSuperior(ctx context.Context, in *GetSuperiorRequest, out *GetSuperiorResponse) error {
	return h.LinkServiceHandler.GetSuperior(ctx, in, out)
}

func (h *linkServiceHandler) GetInferior(ctx context.Context, in *GetInferiorRequest, out *GetInferiorResponse) error {
	return h.LinkServiceHandler.GetInferior(ctx, in, out)
}
